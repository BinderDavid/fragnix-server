{"sliceID":1186395942387256256,"uses":[{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"otherSlice":5194499295619373585},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null},{"reference":{"otherSlice":4776460149308810273},"usedName":{"valueName":{"identifier":"singleton"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":1308981047745659934},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5026122435656534673},"usedName":{"valueName":{"identifier":"fromText"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8806594234069849487},"usedName":{"valueName":{"identifier":"break"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":290632306660342331},"usedName":{"valueName":{"identifier":"fromString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"replicate"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Numeric"},"usedName":{"valueName":{"identifier":"showHex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"fromEnum"}},"qualification":null}],"fragment":["string :: T.Text -> Builder","string s\n  = {-# SCC \"string\" #-} singleton '\"' <> quote s <> singleton '\"'\n  where quote q\n          = case T.uncons t of\n                Nothing -> fromText h\n                Just (!c, t') -> fromText h <> escape c <> quote t'\n          where (h, t) = {-# SCC \"break\" #-} T.break isEscape q\n        isEscape c = c == '\"' || c == '\\\\' || c < ' '\n        escape '\"' = \"\\\\\\\"\"\n        escape '\\\\' = \"\\\\\\\\\"\n        escape '\\n' = \"\\\\n\"\n        escape '\\r' = \"\\\\r\"\n        escape '\\t' = \"\\\\t\"\n        escape c\n          | c < ' ' = fromString $ \"\\\\u\" ++ replicate (4 - length h) '0' ++ h\n          | otherwise = singleton c\n          where h = showHex (fromEnum c) \"\""],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}