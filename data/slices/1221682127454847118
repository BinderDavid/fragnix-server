{"sliceID":1221682127454847118,"uses":[{"reference":{"otherSlice":6172661090007735848},"usedName":{"constructorName":{"identifier":"THStatus"},"constructorTypeName":{"identifier":"THStatus"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":1376049139322579523},"usedName":{"valueName":{"identifier":"maxTotalHeaderLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":6720186289841898006},"usedName":{"constructorName":{"identifier":"OverLargeHeader"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":7416884498698367213},"usedName":{"valueName":{"identifier":"elemIndex"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":6381574974755886985},"usedName":{"valueName":{"identifier":"index"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2441274640222363113},"usedName":{"valueName":{"identifier":"readSource'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6720186289841898006},"usedName":{"constructorName":{"identifier":"IncompleteHeaders"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"otherSlice":4345469173277560744},"usedName":{"valueName":{"identifier":"append"}},"qualification":"S"},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"otherSlice":7409548606206272931},"usedName":{"valueName":{"identifier":"unsafeTake"}},"qualification":"SU"},{"reference":{"otherSlice":897626724666713731},"usedName":{"valueName":{"identifier":"checkCR"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":4018775593934308134},"usedName":{"valueName":{"identifier":"leftoverSource"}},"qualification":null},{"reference":{"otherSlice":3630095162430220529},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"SU"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"id"}},"qualification":null},{"reference":{"otherSlice":3462352128847749526},"usedName":{"typeName":{"identifier":"Source"}},"qualification":null},{"reference":{"otherSlice":6172661090007735848},"usedName":{"typeName":{"identifier":"THStatus"}},"qualification":null}],"fragment":["push :: Source -> THStatus -> ByteString -> IO [ByteString]","push src (THStatus len lines prepend) bs'\n  | len > maxTotalHeaderLength = throwIO OverLargeHeader\n  | otherwise = push' mnl\n  where bs = prepend bs'\n        bsLen = S.length bs\n        mnl\n          = do nl <- S.elemIndex 10 bs\n               if bsLen > nl + 1 then\n                 let c = S.index bs (nl + 1)\n                     b = case nl of\n                             0 -> True\n                             1 -> S.index bs 0 == 13\n                             _ -> False\n                   in Just (nl, not b && (c == 32 || c == 9))\n                 else Just (nl, False)\n        \n        {-# INLINE push' #-}\n        \n        push' :: Maybe (Int, Bool) -> IO [ByteString]\n        push' Nothing\n          = do bst <- readSource' src\n               when (S.null bst) $ throwIO IncompleteHeaders\n               push src status bst\n          where len' = len + bsLen\n                prepend' = S.append bs\n                status = THStatus len' lines prepend'\n        push' (Just (end, True)) = push src status rest\n          where rest = S.drop (end + 1) bs\n                prepend' = S.append (SU.unsafeTake (checkCR bs end) bs)\n                len' = len + end\n                status = THStatus len' lines prepend'\n        push' (Just (end, False))\n          | S.null line =\n            do when (start < bsLen) $\n                 leftoverSource src (SU.unsafeDrop start bs)\n               return (lines [])\n          | otherwise =\n            let len' = len + start\n                lines' = lines . (line :)\n                status = THStatus len' lines' id\n              in\n              if start < bsLen then\n                let bs'' = SU.unsafeDrop start bs in push src status bs'' else\n                do bst <- readSource' src\n                   when (S.null bs) $ throwIO IncompleteHeaders\n                   push src status bst\n          where start = end + 1\n                line = SU.unsafeTake (checkCR bs end) bs"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}