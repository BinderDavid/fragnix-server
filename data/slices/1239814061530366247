{"sliceID":1239814061530366247,"uses":[{"reference":{"otherSlice":9177932474043345134},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":259719065515049680},"usedName":{"typeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7400437654585369758},"usedName":{"typeName":{"identifier":"JSONPath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"otherSlice":27211389055757387},"usedName":{"valueName":{"identifier":"parse"}},"qualification":"L"},{"reference":{"otherSlice":3372263478636542388},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"},{"reference":{"otherSlice":259719065515049680},"usedName":{"constructorName":{"identifier":"ISuccess"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":259719065515049680},"usedName":{"constructorName":{"identifier":"IError"},"constructorTypeName":{"identifier":"IResult"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":3372263478636542388},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Result"}},"qualification":"L"}],"fragment":["eitherDecodeWith ::\n                 Parser Value ->\n                   (Value -> IResult a) -> L.ByteString -> Either (JSONPath, String) a","eitherDecodeWith p to s\n  = case L.parse p s of\n        L.Done _ v -> case to v of\n                          ISuccess a -> Right a\n                          IError path msg -> Left (path, msg)\n        L.Fail _ _ msg -> Left ([], msg)"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}