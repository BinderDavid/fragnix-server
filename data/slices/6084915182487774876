{"sliceID":6084915182487774876,"uses":[{"reference":{"builtinModule":"Control.Monad.Zip"},"usedName":{"typeName":{"identifier":"MonadZip"}},"qualification":null},{"reference":{"otherSlice":6423202506202804909},"usedName":{"typeName":{"identifier":"Array"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.Zip"},"usedName":{"valueName":{"identifier":"mzip"}},"qualification":null},{"reference":{"otherSlice":1956755978042793168},"usedName":{"valueName":{"identifier":"zipW"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.Zip"},"usedName":{"valueName":{"identifier":"mzipWith"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.Zip"},"usedName":{"valueName":{"identifier":"munzip"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3535168395517515397},"usedName":{"valueName":{"identifier":"sizeofArray"}},"qualification":null},{"reference":{"otherSlice":1240416926497088270},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"otherSlice":2421956646851686629},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":3184645393199691518},"usedName":{"valueName":{"identifier":"indexArray"}},"qualification":null},{"reference":{"otherSlice":1080947357764179124},"usedName":{"valueName":{"identifier":"writeArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":4622782793871476184},"usedName":{"valueName":{"identifier":"unsafeFreezeArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null}],"fragment":["instance MonadZip Array where\n        mzip aa ab = zipW \"mzip\" (,) aa ab\n        mzipWith f aa ab = zipW \"mzipWith\" f aa ab\n        munzip aab\n          = runST $\n              do let sz = sizeofArray aab\n                 ma <- newArray sz (die \"munzip\" \"impossible\")\n                 mb <- newArray sz (die \"munzip\" \"impossible\")\n                 let go i\n                       | i < sz =\n                         do let (a, b) = indexArray aab i\n                            writeArray ma i a\n                            writeArray mb i b\n                            go (i + 1)\n                     go _ = return ()\n                 go 0\n                 (,) <$> unsafeFreezeArray ma <*> unsafeFreezeArray mb"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","DeriveDataTypeable","BangPatterns","RankNTypes","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}