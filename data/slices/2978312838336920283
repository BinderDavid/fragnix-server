{"sliceID":2978312838336920283,"uses":[{"reference":{"otherSlice":7787309955308033231},"usedName":{"valueName":{"identifier":"toPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"otherSlice":5151236523523606238},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":140230030014943349},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["split :: Ord k => k -> Map k a -> (Map k a, Map k a)","split !k0 t0 = toPair $ go k0 t0\n  where go k t\n          = case t of\n                Tip -> Tip :*: Tip\n                Bin _ kx x l r -> case compare k kx of\n                                      LT -> let (lt :*: gt) = go k l in lt :*: link kx x gt r\n                                      GT -> let (lt :*: gt) = go k r in link kx x l lt :*: gt\n                                      EQ -> (l :*: r)"],"instances":[],"language":{"extensions":["BangPatterns","PatternGuards","DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}