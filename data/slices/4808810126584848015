{"sliceID":4808810126584848015,"uses":[{"reference":{"otherSlice":8778055675355358157},"usedName":{"valueName":{"identifier":"runSTUArray"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":8068578393031383548},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"otherSlice":8584153486164197419},"usedName":{"valueName":{"identifier":"kmpBorders"}},"qualification":null},{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":7390130272431652744},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":6368466691402926995},"usedName":{"typeName":{"identifier":"UArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["automaton :: S.ByteString -> UArray Int Int","automaton !pat\n  = runSTUArray\n      (do let !patLen = S.length pat\n              {-# INLINE patAt #-}\n              patAt !i = fromIntegral (unsafeIndex pat i)\n              !bord = kmpBorders pat\n          aut <- newArray (0, (patLen + 1) * 256 - 1) 0\n          unsafeWrite aut (patAt 0) 1\n          let loop !state\n                = do let !base = state `shiftL` 8\n                         inner j\n                           | j < 0 = if state == patLen then return aut else loop (state + 1)\n                           | otherwise =\n                             do let !i = base + patAt j\n                                s <- unsafeRead aut i\n                                when (s == 0) (unsafeWrite aut i (j + 1))\n                                inner (unsafeAt bord j)\n                     if state == patLen then inner (unsafeAt bord state) else\n                       inner state\n          loop 1)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleContexts","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}