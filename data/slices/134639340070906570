{"sliceID":134639340070906570,"uses":[{"reference":{"otherSlice":8946881164643755763},"usedName":{"constructorName":{"identifier":"SResponse"},"constructorTypeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":8946881164643755763},"usedName":{"valueName":{"identifier":"simpleHeaders"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":9144472435362660294},"usedName":{"valueName":{"identifier":"assertString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4755613459485646256},"usedName":{"valueName":{"identifier":"assertBool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":3945053944125703351},"usedName":{"typeName":{"identifier":"CI"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":8946881164643755763},"usedName":{"typeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":6144584388836266359},"usedName":{"typeName":{"identifier":"Session"}},"qualification":null}],"fragment":["assertHeader ::\n             CI ByteString -> ByteString -> SResponse -> Session ()","assertHeader header value SResponse{simpleHeaders = h}\n  = case lookup header h of\n        Nothing -> assertString $\n                     concat\n                       [\"Expected header \", show header, \" to be \", show value,\n                        \", but it was not present\"]\n        Just value' -> assertBool\n                         (concat\n                            [\"Expected header \", show header, \" to be \", show value,\n                             \", but received \", show value'])\n                         (value == value')"],"instances":[],"language":{"extensions":["OverloadedStrings","DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}