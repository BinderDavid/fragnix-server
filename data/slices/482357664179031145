{"sliceID":482357664179031145,"uses":[{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":6872806235400289581},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3272476539275573849},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"otherSlice":5576356556970261137},"usedName":{"valueName":{"identifier":"binCheckLeft"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1003427505070580460},"usedName":{"valueName":{"identifier":"binCheckRight"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":555828902643222699},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null}],"fragment":["updateLookupWithKey ::\n                    (Key -> a -> Maybe a) -> Key -> IntMap a -> (Maybe a, IntMap a)","updateLookupWithKey f !k t@(Bin p m l r)\n  | nomatch k p m = (Nothing, t)\n  | zero k m =\n    let !(found, l') = updateLookupWithKey f k l in\n      (found, binCheckLeft p m l' r)\n  | otherwise =\n    let !(found, r') = updateLookupWithKey f k r in\n      (found, binCheckRight p m l r')\nupdateLookupWithKey f k t@(Tip ky y)\n  | k == ky =\n    case (f k y) of\n        Just y' -> (Just y, Tip ky y')\n        Nothing -> (Just y, Nil)\n  | otherwise = (Nothing, t)\nupdateLookupWithKey _ _ Nil = (Nothing, Nil)"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}