{"sliceID":5890659083947982326,"uses":[{"reference":{"otherSlice":4192188388592563342},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4192188388592563342},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":7264539383850280425},"usedName":{"valueName":{"identifier":"w2c"}},"qualification":null},{"reference":{"otherSlice":8204531367323329175},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"B"},{"reference":{"otherSlice":6845875751554403712},"usedName":{"valueName":{"identifier":"unsafeTail"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"^"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":4645870123692490014},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["readInteger :: ByteString -> Maybe (Integer, ByteString)","readInteger Empty = Nothing\nreadInteger (Chunk c0 cs0)\n  = case w2c (B.unsafeHead c0) of\n        '-' -> first (B.unsafeTail c0) cs0 >>=\n                 \\ (n, cs') -> return (-n, cs')\n        '+' -> first (B.unsafeTail c0) cs0\n        _ -> first c0 cs0\n  where first c cs\n          | B.null c =\n            case cs of\n                Empty -> Nothing\n                (Chunk c' cs') -> first' c' cs'\n          | otherwise = first' c cs\n        first' c cs\n          = case B.unsafeHead c of\n                w | w >= 48 && w <= 57 ->\n                    Just $ loop 1 (fromIntegral w - 48) [] (B.unsafeTail c) cs\n                  | otherwise -> Nothing\n        \n        loop ::\n             Int ->\n               Int ->\n                 [Integer] -> S.ByteString -> ByteString -> (Integer, ByteString)\n        loop !d !acc ns !c cs\n          | B.null c =\n            case cs of\n                Empty -> combine d acc ns c cs\n                (Chunk c' cs') -> loop d acc ns c' cs'\n          | otherwise =\n            case B.unsafeHead c of\n                w | w >= 48 && w <= 57 ->\n                    if d < 9 then\n                      loop (d + 1) (10 * acc + (fromIntegral w - 48)) ns (B.unsafeTail c)\n                        cs\n                      else\n                      loop 1 (fromIntegral w - 48) (fromIntegral acc : ns)\n                        (B.unsafeTail c)\n                        cs\n                  | otherwise -> combine d acc ns c cs\n        combine _ acc [] c cs = end (fromIntegral acc) c cs\n        combine d acc ns c cs\n          = end (10 ^ d * combine1 1000000000 ns + fromIntegral acc) c cs\n        combine1 _ [n] = n\n        combine1 b ns = combine1 (b * b) $ combine2 b ns\n        combine2 b (n : (m : ns))\n          = let t = n + m * b in t `seq` (t : combine2 b ns)\n        combine2 _ ns = ns\n        end n c cs = let c' = chunk c cs in c' `seq` (n, c')"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}