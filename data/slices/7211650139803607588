{"sliceID":7211650139803607588,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":3906028912178762584},"usedName":{"valueName":{"identifier":"prependCycle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":1217799320961605858},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":9034332628923044531},"usedName":{"valueName":{"identifier":"ldrop"}},"qualification":null},{"reference":{"otherSlice":3906028912178762584},"usedName":{"valueName":{"identifier":"substitution"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":3906028912178762584},"usedName":{"typeName":{"identifier":"Substitution"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["replace ::\n          Substitution rep =>\n          S.ByteString -> rep -> L.ByteString -> L.ByteString","replace pat\n  | S.null pat = \\ sub -> prependCycle sub\n  | otherwise =\n    let !patLen = S.length pat\n        breaker = lazyBreaker True pat\n        repl subst strs\n          | null strs = []\n          | otherwise =\n            let (pre, mtch) = breaker strs in\n              pre ++\n                case mtch of\n                    [] -> []\n                    _ -> subst (repl subst (ldrop patLen mtch))\n      in\n      \\ sub ->\n        let {-# NOINLINE subst #-}\n            !subst = substitution sub\n            repl1 = repl subst\n          in L.fromChunks . repl1 . L.toChunks"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}