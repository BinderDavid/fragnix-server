{"sliceID":1228724370039307329,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":3906028912178762584},"usedName":{"valueName":{"identifier":"prependCycle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"otherSlice":4645870123692490014},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":"LI"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":"LI"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":2839212583994086532},"usedName":{"valueName":{"identifier":"strictSearcher"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3906028912178762584},"usedName":{"valueName":{"identifier":"substitution"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"otherSlice":1264447719843148261},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"otherSlice":3906028912178762584},"usedName":{"typeName":{"identifier":"Substitution"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["replace ::\n          Substitution rep =>\n          S.ByteString -> rep -> S.ByteString -> L.ByteString","replace pat\n  | S.null pat = \\ sub -> prependCycle sub . flip LI.chunk LI.Empty\n  | otherwise =\n    let !patLen = S.length pat\n        searcher = strictSearcher False pat\n        repl sub\n          = let {-# NOINLINE subst #-}\n                !subst = substitution sub\n                replacer str\n                  | S.null str = []\n                  | otherwise =\n                    case searcher str of\n                        [] -> [str]\n                        (i : _) | i == 0 -> subst $ replacer (S.drop patLen str)\n                                | otherwise ->\n                                  S.take i str : subst (replacer (S.drop (i + patLen) str))\n              in replacer\n      in \\ sub -> L.fromChunks . repl sub"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}