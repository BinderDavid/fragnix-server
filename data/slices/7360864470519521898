{"sliceID":7360864470519521898,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":6947997737051125680},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":1573228051661655334},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"otherSlice":4577633070085175002},"usedName":{"valueName":{"identifier":"hash"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":6325252103272764254},"usedName":{"valueName":{"identifier":"leaf"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":3998322101007631306},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":4529322583985048063},"usedName":{"valueName":{"identifier":"collision"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6525654731132994026},"usedName":{"valueName":{"identifier":"two"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":676493390108273118},"usedName":{"valueName":{"identifier":"insertM"}},"qualification":"A"},{"reference":{"otherSlice":258169505551792130},"usedName":{"valueName":{"identifier":"bitmapIndexedOrFull"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":2238804280971673479},"usedName":{"valueName":{"identifier":"indexM"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":2031517040786215680},"usedName":{"valueName":{"identifier":"bitsPerSubkey"}},"qualification":null},{"reference":{"otherSlice":3196208501829338360},"usedName":{"valueName":{"identifier":"unsafeUpdateM"}},"qualification":"A"},{"reference":{"otherSlice":8692377828033704741},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"otherSlice":3162727719459805984},"usedName":{"valueName":{"identifier":"sparseIndex"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":6264238055823815301},"usedName":{"valueName":{"identifier":"index"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":8273743030324893439},"usedName":{"valueName":{"identifier":"updateOrSnocWith"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4486064531931808434},"usedName":{"valueName":{"identifier":"singleton"}},"qualification":"A"}],"fragment":["unsafeInsertWith ::\n                   (Eq k, Hashable k) =>\n                   (v -> v -> v) -> k -> v -> HashMap k v -> HashMap k v","unsafeInsertWith f k0 v0 m0 = runST (go h0 k0 v0 0 m0)\n  where h0 = hash k0\n        go !h !k x !_ Empty = return $! leaf h k x\n        go h k x s (Leaf hy l@(L ky y))\n          | hy == h =\n            if ky == k then return $! leaf h k (f x y) else\n              do let l' = x `seq` (L k x)\n                 return $! collision h l l'\n          | otherwise = two s h k x hy ky y\n        go h k x s t@(BitmapIndexed b ary)\n          | b .&. m == 0 =\n            do ary' <- A.insertM ary i $! leaf h k x\n               return $! bitmapIndexedOrFull (b .|. m) ary'\n          | otherwise =\n            do st <- A.indexM ary i\n               st' <- go h k x (s + bitsPerSubkey) st\n               A.unsafeUpdateM ary i st'\n               return t\n          where m = mask h s\n                i = sparseIndex b m\n        go h k x s t@(Full ary)\n          = do st <- A.indexM ary i\n               st' <- go h k x (s + bitsPerSubkey) st\n               A.unsafeUpdateM ary i st'\n               return t\n          where i = index h s\n        go h k x s t@(Collision hy v)\n          | h == hy = return $! Collision h (updateOrSnocWith f k x v)\n          | otherwise =\n            go h k x s $ BitmapIndexed (mask hy s) (A.singleton t)"],"instances":[],"language":{"extensions":["BangPatterns","PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}