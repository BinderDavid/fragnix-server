{"sliceID":5881621422363348972,"uses":[{"reference":{"otherSlice":4192188388592563342},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":4192188388592563342},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":8204531367323329175},"usedName":{"valueName":{"identifier":"unsafeHead"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7409548606206272931},"usedName":{"valueName":{"identifier":"unsafeTake"}},"qualification":"S"},{"reference":{"otherSlice":6845875751554403712},"usedName":{"valueName":{"identifier":"unsafeTail"}},"qualification":"S"},{"reference":{"otherSlice":904520509103944102},"usedName":{"valueName":{"identifier":"revNonEmptyChunks"}},"qualification":null},{"reference":{"otherSlice":1560654030963778556},"usedName":{"valueName":{"identifier":"findIndexOrEnd"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":3630095162430220529},"usedName":{"valueName":{"identifier":"unsafeDrop"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["group :: ByteString -> [ByteString]","group = go\n  where go Empty = []\n        go (Chunk c cs)\n          | S.length c == 1 = to [c] (S.unsafeHead c) cs\n          | otherwise =\n            to [S.unsafeTake 1 c] (S.unsafeHead c) (Chunk (S.unsafeTail c) cs)\n        to acc !_ Empty = revNonEmptyChunks acc : []\n        to acc !w (Chunk c cs)\n          = case findIndexOrEnd (/= w) c of\n                0 -> revNonEmptyChunks acc : go (Chunk c cs)\n                n | n == S.length c -> to (S.unsafeTake n c : acc) w cs\n                  | otherwise ->\n                    revNonEmptyChunks (S.unsafeTake n c : acc) :\n                      go (Chunk (S.unsafeDrop n c) cs)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}