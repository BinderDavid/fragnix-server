{"sliceID":6743793707963298135,"uses":[{"reference":{"otherSlice":231623141019087582},"usedName":{"valueName":{"identifier":"lines"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7107677885011947020},"usedName":{"valueName":{"identifier":"filter"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":7696143636323804766},"usedName":{"valueName":{"identifier":"_cr"}},"qualification":null},{"reference":{"otherSlice":3921863050979165916},"usedName":{"valueName":{"identifier":"intercalate"}},"qualification":"S8"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"mapMaybe"}},"qualification":null},{"reference":{"otherSlice":1876519188538962238},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"S8"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null}],"fragment":["sanitizeHeaderValue :: ByteString -> ByteString","sanitizeHeaderValue v\n  = case S8.lines $ S.filter (/= _cr) v of\n        [] -> \"\"\n        x : xs -> S8.intercalate \"\\r\\n\" (x : mapMaybe addSpaceIfMissing xs)\n  where addSpaceIfMissing line\n          = case S8.uncons line of\n                Nothing -> Nothing\n                Just (first, _) | first == ' ' || first == '\\t' -> Just line\n                                | otherwise -> Just $ \" \" <> line"],"instances":[],"language":{"extensions":["OverloadedStrings","ScopedTypeVariables","TupleSections","RankNTypes","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}