{"sliceID":6411985416072958886,"uses":[{"reference":{"otherSlice":7721714347464982760},"usedName":{"valueName":{"identifier":"sumEncoding"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"constructorName":{"identifier":"TwoElemArray"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":2999840968035654076},"usedName":{"valueName":{"identifier":"array"}},"qualification":null},{"reference":{"otherSlice":3260348104434909594},"usedName":{"valueName":{"identifier":"encStr"}},"qualification":null},{"reference":{"otherSlice":5903116316445630912},"usedName":{"valueName":{"operator":"<%>"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"constructorName":{"identifier":"TaggedObject"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"valueName":{"identifier":"tagFieldName"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"valueName":{"identifier":"contentsFieldName"}},"qualification":null},{"reference":{"otherSlice":2241240114275565033},"usedName":{"valueName":{"identifier":"text"}},"qualification":"E"},{"reference":{"otherSlice":1239263014128492149},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"otherSlice":37739276968098242},"usedName":{"valueName":{"operator":"<:>"}},"qualification":null},{"reference":{"otherSlice":5241165181606382074},"usedName":{"valueName":{"identifier":"object"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"constructorName":{"identifier":"ObjectWithSingleField"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"otherSlice":5829256881764969316},"usedName":{"constructorName":{"identifier":"UntaggedValue"},"constructorTypeName":{"identifier":"SumEncoding"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7721714347464982760},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["sumToEncoding :: Options -> Bool -> Bool -> Name -> Q Exp -> Q Exp","sumToEncoding opts multiCons nullary conName exp\n  | multiCons =\n    let fexp = exp in\n      case sumEncoding opts of\n          TwoElemArray -> array (encStr opts conName <%> fexp)\n          TaggedObject{tagFieldName, contentsFieldName} -> let tag\n                                                                 = [| E.text (T.pack tagFieldName)\n                                                                     |]\n                                                                     <:> encStr opts conName\n                                                               contents\n                                                                 = [|\n                                                                     E.text\n                                                                       (T.pack contentsFieldName)\n                                                                     |]\n                                                                     <:> fexp\n                                                             in\n                                                             object $\n                                                               if nullary then tag else\n                                                                 tag <%> contents\n          ObjectWithSingleField -> object (encStr opts conName <:> fexp)\n          UntaggedValue | nullary -> encStr opts conName\n          UntaggedValue -> exp\n  | otherwise = exp"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"]}}