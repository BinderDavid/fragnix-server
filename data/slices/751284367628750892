{"sliceID":751284367628750892,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null}],"fragment":["class MVector v a where\n        basicLength :: v s a -> Int\n        \n        basicUnsafeSlice :: Int -> Int -> v s a -> v s a\n        \n        basicOverlaps :: v s a -> v s a -> Bool\n        \n        basicUnsafeNew :: PrimMonad m => Int -> m (v (PrimState m) a)\n        \n        basicInitialize :: PrimMonad m => v (PrimState m) a -> m ()\n        \n        basicUnsafeReplicate ::\n                               PrimMonad m => Int -> a -> m (v (PrimState m) a)\n        \n        basicUnsafeRead :: PrimMonad m => v (PrimState m) a -> Int -> m a\n        \n        basicUnsafeWrite ::\n                           PrimMonad m => v (PrimState m) a -> Int -> a -> m ()\n        \n        basicClear :: PrimMonad m => v (PrimState m) a -> m ()\n        \n        basicSet :: PrimMonad m => v (PrimState m) a -> a -> m ()\n        \n        basicUnsafeCopy ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeMove ::\n                          PrimMonad m => v (PrimState m) a -> v (PrimState m) a -> m ()\n        \n        basicUnsafeGrow ::\n                          PrimMonad m => v (PrimState m) a -> Int -> m (v (PrimState m) a)\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n x\n          = do v <- basicUnsafeNew n\n               basicSet v x\n               return v\n        \n        {-# INLINE basicClear #-}\n        basicClear _ = return ()\n        \n        {-# INLINE basicSet #-}\n        basicSet !v x\n          | n == 0 = return ()\n          | otherwise =\n            do basicUnsafeWrite v 0 x\n               do_set 1\n          where !n = basicLength v\n                do_set i\n                  | 2 * i < n =\n                    do basicUnsafeCopy (basicUnsafeSlice i i v)\n                         (basicUnsafeSlice 0 i v)\n                       do_set (2 * i)\n                  | otherwise =\n                    basicUnsafeCopy (basicUnsafeSlice i (n - i) v)\n                      (basicUnsafeSlice 0 (n - i) v)\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy !dst !src = do_copy 0\n          where !n = basicLength src\n                do_copy i\n                  | i < n =\n                    do x <- basicUnsafeRead src i\n                       basicUnsafeWrite dst i x\n                       do_copy (i + 1)\n                  | otherwise = return ()\n        \n        {-# INLINE basicUnsafeMove #-}\n        basicUnsafeMove !dst !src\n          | basicOverlaps dst src =\n            do srcCopy <- basicUnsafeNew (basicLength src)\n               basicUnsafeCopy srcCopy src\n               basicUnsafeCopy dst srcCopy\n          | otherwise = basicUnsafeCopy dst src\n        \n        {-# INLINE basicUnsafeGrow #-}\n        basicUnsafeGrow v by\n          = do v' <- basicUnsafeNew (n + by)\n               basicUnsafeCopy (basicUnsafeSlice 0 n v') v\n               return v'\n          where n = basicLength v"],"instances":[{"instanceID":1609046274164732444,"instancePart":"OfThisClass"},{"instanceID":2649966481287455771,"instancePart":"OfThisClass"},{"instanceID":5259319963693052747,"instancePart":"OfThisClass"},{"instanceID":5160341545193922877,"instancePart":"OfThisClass"},{"instanceID":823831970198133270,"instancePart":"OfThisClass"},{"instanceID":996604155067576000,"instancePart":"OfThisClass"},{"instanceID":5929339329371349107,"instancePart":"OfThisClass"},{"instanceID":8899077645385678396,"instancePart":"OfThisClass"},{"instanceID":5246670817745328413,"instancePart":"OfThisClass"},{"instanceID":7525181523057880628,"instancePart":"OfThisClass"},{"instanceID":7301723287504201242,"instancePart":"OfThisClass"},{"instanceID":2539344460398207957,"instancePart":"OfThisClass"},{"instanceID":2959440929823587205,"instancePart":"OfThisClass"},{"instanceID":4977533891201212334,"instancePart":"OfThisClass"},{"instanceID":8086933309497245078,"instancePart":"OfThisClass"},{"instanceID":5198337387601834028,"instancePart":"OfThisClass"},{"instanceID":3526119359943935188,"instancePart":"OfThisClass"},{"instanceID":1390996950440097094,"instancePart":"OfThisClass"},{"instanceID":3089059343217659297,"instancePart":"OfThisClass"},{"instanceID":3860330761807429640,"instancePart":"OfThisClass"},{"instanceID":1860990907842654647,"instancePart":"OfThisClass"},{"instanceID":6318538290352809392,"instancePart":"OfThisClass"},{"instanceID":4493346144973792439,"instancePart":"OfThisClass"},{"instanceID":2045623178810230890,"instancePart":"OfThisClass"}],"language":{"extensions":["MultiParamTypeClasses","BangPatterns","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}