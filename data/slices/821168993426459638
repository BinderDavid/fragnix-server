{"sliceID":821168993426459638,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"otherSlice":6518686126050711067},"usedName":{"typeName":{"identifier":"WhenMatched"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":3321135336296044502},"usedName":{"valueName":{"identifier":"zipWithMatched"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"otherSlice":2776810224244958302},"usedName":{"valueName":{"identifier":"zipWithMaybeAMatched"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":1684695337482840098},"usedName":{"valueName":{"identifier":"runWhenMatched"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null}],"fragment":["instance (Monad f, Applicative f) =>\n         Applicative (WhenMatched f x y)\n         where\n        pure x = zipWithMatched (\\ _ _ _ -> x)\n        fs <*> xs\n          = zipWithMaybeAMatched $\n              \\ k x y ->\n                do res <- runWhenMatched fs k x y\n                   case res of\n                       Nothing -> pure Nothing\n                       Just r -> (pure $!) . fmap r =<< runWhenMatched xs k x y\n        \n        {-# INLINE pure #-}\n        \n        {-# INLINE (<*>) #-}"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}