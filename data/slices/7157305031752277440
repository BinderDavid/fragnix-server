{"sliceID":7157305031752277440,"uses":[{"reference":{"otherSlice":5688935604549812652},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":8504814932740575867},"usedName":{"valueName":{"identifier":"zip3"}},"qualification":null},{"reference":{"otherSlice":4541685358790993560},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":4302818720694206147},"usedName":{"typeName":{"identifier":"Bundle"}},"qualification":null}],"fragment":["zipWith5M ::\n            Monad m =>\n            (a -> b -> c -> d -> e -> m f) ->\n              Bundle m v a ->\n                Bundle m v b ->\n                  Bundle m v c -> Bundle m v d -> Bundle m v e -> Bundle m v f","zipWith5M f sa sb sc sd se\n  = zipWithM (\\ (a, b, c) (d, e) -> f a b c d e) (zip3 sa sb sc)\n      (zip sd se)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}