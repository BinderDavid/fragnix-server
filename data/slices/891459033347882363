{"sliceID":891459033347882363,"uses":[{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Leaf"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"BitmapIndexed"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Full"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":1936919481856046494},"usedName":{"valueName":{"identifier":"fullNodeMask"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"constructorName":{"identifier":"Collision"},"constructorTypeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":7808444151530224948},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"otherSlice":1573228051661655334},"usedName":{"valueName":{"identifier":"runST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7775656487906570083},"usedName":{"valueName":{"identifier":"new_"}},"qualification":"A"},{"reference":{"otherSlice":5817155485589370063},"usedName":{"typeName":{"identifier":"Array"}},"qualification":"A"},{"reference":{"otherSlice":4871054613251541877},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":null},{"reference":{"otherSlice":7882976849236336198},"usedName":{"typeName":{"identifier":"MArray"}},"qualification":"A"},{"reference":{"otherSlice":4881069007805191276},"usedName":{"typeName":{"identifier":"Bitmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.ST"},"usedName":{"typeName":{"identifier":"ST"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4629617069132548585},"usedName":{"valueName":{"identifier":"read"}},"qualification":"A"},{"reference":{"otherSlice":1687857768423735204},"usedName":{"valueName":{"identifier":"isLeafOrCollision"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":4563708495037232413},"usedName":{"valueName":{"identifier":"trim"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7341007817000105227},"usedName":{"valueName":{"identifier":"maxChildren"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":9032193163477039620},"usedName":{"valueName":{"identifier":"unsafeShiftL"}},"qualification":null},{"reference":{"otherSlice":2374614385050159493},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"complement"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":410507955169915919},"usedName":{"valueName":{"identifier":"write"}},"qualification":"A"},{"reference":{"otherSlice":3998322101007631306},"usedName":{"typeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"otherSlice":8124215306967247849},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["filterMapAux ::\n             forall k v1 v2 .\n               (HashMap k v1 -> Maybe (HashMap k v2)) ->\n                 (Leaf k v1 -> Maybe (Leaf k v2)) -> HashMap k v1 -> HashMap k v2","filterMapAux onLeaf onColl = go\n  where go Empty = Empty\n        go t@Leaf{}\n          | Just t' <- onLeaf t = t'\n          | otherwise = Empty\n        go (BitmapIndexed b ary) = filterA ary b\n        go (Full ary) = filterA ary fullNodeMask\n        go (Collision h ary) = filterC ary h\n        filterA ary0 b0\n          = let !n = A.length ary0 in\n              runST $\n                do mary <- A.new_ n\n                   step ary0 mary b0 0 0 1 n\n          where step ::\n                     A.Array (HashMap k v1) ->\n                       A.MArray s (HashMap k v2) ->\n                         Bitmap -> Int -> Int -> Bitmap -> Int -> ST s (HashMap k v2)\n                step !ary !mary !b i !j !bi n\n                  | i >= n =\n                    case j of\n                        0 -> return Empty\n                        1 -> do ch <- A.read mary 0\n                                case ch of\n                                    t | isLeafOrCollision t -> return t\n                                    _ -> BitmapIndexed b <$> trim mary 1\n                        _ -> do ary2 <- trim mary j\n                                return $!\n                                  if j == maxChildren then Full ary2 else BitmapIndexed b ary2\n                  | bi .&. b == 0 = step ary mary b i j (bi `unsafeShiftL` 1) n\n                  | otherwise =\n                    case go (A.index ary i) of\n                        Empty -> step ary mary (b .&. complement bi) (i + 1) j\n                                   (bi `unsafeShiftL` 1)\n                                   n\n                        t -> do A.write mary j t\n                                step ary mary b (i + 1) (j + 1) (bi `unsafeShiftL` 1) n\n        filterC ary0 h\n          = let !n = A.length ary0 in\n              runST $\n                do mary <- A.new_ n\n                   step ary0 mary 0 0 n\n          where step ::\n                     A.Array (Leaf k v1) ->\n                       A.MArray s (Leaf k v2) -> Int -> Int -> Int -> ST s (HashMap k v2)\n                step !ary !mary i !j n\n                  | i >= n =\n                    case j of\n                        0 -> return Empty\n                        1 -> do l <- A.read mary 0\n                                return $! Leaf h l\n                        _ | i == j ->\n                            do ary2 <- A.unsafeFreeze mary\n                               return $! Collision h ary2\n                          | otherwise ->\n                            do ary2 <- trim mary j\n                               return $! Collision h ary2\n                  | Just el <- onColl (A.index ary i) =\n                    A.write mary j el >> step ary mary (i + 1) (j + 1) n\n                  | otherwise = step ary mary (i + 1) j n"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","PatternGuards","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}