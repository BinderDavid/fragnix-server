{"sliceID":3196523137760578350,"uses":[{"reference":{"otherSlice":1891455110916781955},"usedName":{"typeName":{"identifier":"ParseTime"}},"qualification":null},{"reference":{"otherSlice":5673600904930200482},"usedName":{"typeName":{"identifier":"TimeOfDay"}},"qualification":null},{"reference":{"otherSlice":1891455110916781955},"usedName":{"valueName":{"identifier":"buildTime"}},"qualification":null},{"reference":{"otherSlice":5673600904930200482},"usedName":{"constructorName":{"identifier":"TimeOfDay"},"constructorTypeName":{"identifier":"TimeOfDay"}},"qualification":null},{"reference":{"builtinModule":"GHC.Read"},"usedName":{"typeName":{"identifier":"Read"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"readMaybe"}},"qualification":null},{"reference":{"otherSlice":3810888637359003686},"usedName":{"valueName":{"identifier":"up"}},"qualification":null},{"reference":{"otherSlice":6723709052195847072},"usedName":{"valueName":{"identifier":"amPm"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"mod"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"fromInteger"}},"qualification":null},{"reference":{"otherSlice":8458342164046854712},"usedName":{"valueName":{"identifier":"mkPico"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"truncate"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"otherSlice":5747797075701138556},"usedName":{"valueName":{"identifier":"rpad"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"drop"}},"qualification":null},{"reference":{"otherSlice":917228729380095660},"usedName":{"valueName":{"identifier":"mfoldl"}},"qualification":null},{"reference":{"otherSlice":1644757660406085099},"usedName":{"valueName":{"identifier":"midnight"}},"qualification":null}],"fragment":["instance ParseTime TimeOfDay where\n        buildTime l\n          = let f t@(TimeOfDay h m s) (c, x)\n                  = let ra :: (Read a) => Maybe a\n                        ra = readMaybe x\n                        getAmPm\n                          = let upx = up x\n                                (amStr, pmStr) = amPm l\n                              in\n                              if upx == amStr then Just $ TimeOfDay (h `mod` 12) m s else\n                                if upx == pmStr then\n                                  Just $ TimeOfDay (if h < 12 then h + 12 else h) m s else Nothing\n                      in\n                      case c of\n                          'P' -> getAmPm\n                          'p' -> getAmPm\n                          'H' -> do a <- ra\n                                    return $ TimeOfDay a m s\n                          'I' -> do a <- ra\n                                    return $ TimeOfDay a m s\n                          'k' -> do a <- ra\n                                    return $ TimeOfDay a m s\n                          'l' -> do a <- ra\n                                    return $ TimeOfDay a m s\n                          'M' -> do a <- ra\n                                    return $ TimeOfDay h a s\n                          'S' -> do a <- ra\n                                    return $ TimeOfDay h m (fromInteger a)\n                          'q' -> do a <- ra\n                                    return $ TimeOfDay h m (mkPico (truncate s) a)\n                          'Q' -> if null x then Just t else\n                                   do ps <- readMaybe $ take 12 $ rpad 12 '0' $ drop 1 x\n                                      return $ TimeOfDay h m (mkPico (truncate s) ps)\n                          _ -> Just t\n              in mfoldl f (Just midnight)"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}