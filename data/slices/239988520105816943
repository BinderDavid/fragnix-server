{"sliceID":239988520105816943,"uses":[{"reference":{"otherSlice":6676997269845548905},"usedName":{"valueName":{"identifier":"getRequestBodyType"}},"qualification":"Parse"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.IO.Class"},"usedName":{"valueName":{"identifier":"liftIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"newMVar"}},"qualification":null},{"reference":{"builtinModule":"Control.Concurrent.MVar"},"usedName":{"valueName":{"identifier":"modifyMVar"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":5035500197292437764},"usedName":{"valueName":{"identifier":"sinkRequestBody"}},"qualification":"Parse"},{"reference":{"builtinModule":"Control.Monad.IO.Class"},"usedName":{"typeName":{"identifier":"MonadIO"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":7789413659326569857},"usedName":{"typeName":{"identifier":"BackEnd"}},"qualification":"Parse"},{"reference":{"otherSlice":2150836866812832620},"usedName":{"typeName":{"identifier":"Request"}},"qualification":null},{"reference":{"otherSlice":1156478319431720055},"usedName":{"typeName":{"identifier":"Param"}},"qualification":"Parse"},{"reference":{"otherSlice":6377169190689415136},"usedName":{"typeName":{"identifier":"File"}},"qualification":"Parse"}],"fragment":["parseRequestBody ::\n                   MonadIO m =>\n                   [B.ByteString] ->\n                     Parse.BackEnd y -> Request -> m ([Parse.Param], [Parse.File y])","parseRequestBody bl s r\n  = case Parse.getRequestBodyType r of\n        Nothing -> return ([], [])\n        Just rbt -> do mvar <- liftIO $ newMVar bl\n                       let provider\n                             = modifyMVar mvar $\n                                 \\ bsold ->\n                                   case bsold of\n                                       [] -> return ([], B.empty)\n                                       (b : bs) -> return (bs, b)\n                       liftIO $ Parse.sinkRequestBody s rbt provider"],"instances":[],"language":{"extensions":["FlexibleContexts","FlexibleInstances","OverloadedStrings","RankNTypes","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}