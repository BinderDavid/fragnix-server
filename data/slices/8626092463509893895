{"sliceID":8626092463509893895,"uses":[{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"otherSlice":3855045874624644727},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"otherSlice":7074760854266457307},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"otherSlice":5010666227755546614},"usedName":{"valueName":{"identifier":"merge"}},"qualification":null},{"reference":{"otherSlice":3545442061195933811},"usedName":{"valueName":{"identifier":"unsafeInsertNew"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6658013581939880226},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"typeName":{"identifier":"IntPSQ"}},"qualification":null}],"fragment":["unsafeLookupIncreasePriority ::\n                               Ord p =>\n                               (p -> v -> (Maybe b, p, v)) ->\n                                 Key -> IntPSQ p v -> (Maybe b, IntPSQ p v)","unsafeLookupIncreasePriority f k t0\n  = case go t0 of\n        (# t, mbB #) -> (mbB, t)\n  where go t\n          = case t of\n                Nil -> (# Nil, Nothing #)\n                Tip k' p' x' | k == k' ->\n                               case f p' x' of\n                                   (!fb, !fp, !fx) -> (# Tip k fp fx, fb #)\n                             | otherwise -> (# t, Nothing #)\n                Bin k' p' x' m l r | nomatch k k' m -> (# t, Nothing #)\n                                   | k == k' ->\n                                     case f p' x' of\n                                         (!fb, !fp, !fx) | zero k m ->\n                                                           let t'\n                                                                 = merge m\n                                                                     (unsafeInsertNew k fp fx l)\n                                                                     r\n                                                             in t' `seq` (# t', fb #)\n                                                         | otherwise ->\n                                                           let t'\n                                                                 = merge m l\n                                                                     (unsafeInsertNew k fp fx r)\n                                                             in t' `seq` (# t', fb #)\n                                   | zero k m ->\n                                     case go l of\n                                         (# l', mbB #) -> l' `seq` (# Bin k' p' x' m l' r, mbB #)\n                                   | otherwise ->\n                                     case go r of\n                                         (# r', mbB #) -> r' `seq` (# Bin k' p' x' m l r', mbB #)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}