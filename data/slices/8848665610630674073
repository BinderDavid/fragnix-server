{"sliceID":8848665610630674073,"uses":[{"reference":{"otherSlice":8946881164643755763},"usedName":{"constructorName":{"identifier":"SResponse"},"constructorTypeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":8946881164643755763},"usedName":{"valueName":{"identifier":"simpleBody"}},"qualification":null},{"reference":{"otherSlice":4755613459485646256},"usedName":{"valueName":{"identifier":"assertBool"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5451785942030126183},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"L8"},{"reference":{"otherSlice":8153825048320937403},"usedName":{"valueName":{"identifier":"isInfixOf"}},"qualification":"S"},{"reference":{"otherSlice":248739104559243974},"usedName":{"valueName":{"identifier":"concat"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"otherSlice":8946881164643755763},"usedName":{"typeName":{"identifier":"SResponse"}},"qualification":null},{"reference":{"otherSlice":6144584388836266359},"usedName":{"typeName":{"identifier":"Session"}},"qualification":null}],"fragment":["assertBodyContains :: L.ByteString -> SResponse -> Session ()","assertBodyContains lbs SResponse{simpleBody = lbs'}\n  = assertBool\n      (concat\n         [\"Expected response body to contain \", show $ L8.unpack lbs,\n          \", but received \", show $ L8.unpack lbs'])\n      $ strict lbs `S.isInfixOf` strict lbs'\n  where strict = S.concat . L.toChunks"],"instances":[],"language":{"extensions":["OverloadedStrings","DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}