{"sliceID":4158094470745031454,"uses":[{"reference":{"otherSlice":3720735402915720453},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":143484768843649221},"usedName":{"typeName":{"identifier":"TyVarMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":1506622141633593626},"usedName":{"valueName":{"identifier":"uncurryTy"}},"qualification":null},{"reference":{"otherSlice":6831538461448984024},"usedName":{"valueName":{"identifier":"expandSyn"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"splitAt"}},"qualification":"NE"},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"length"}},"qualification":"NE"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":7455584928982954593},"usedName":{"valueName":{"identifier":"unapplyTy"}},"qualification":null},{"reference":{"otherSlice":4096054026617212887},"usedName":{"valueName":{"identifier":"arityInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":2071249848861799617},"usedName":{"valueName":{"identifier":"varTToNameMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.List.NonEmpty"},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"NE"},{"reference":{"otherSlice":4512815971435594603},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"catMaybes"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"any"}},"qualification":null},{"reference":{"otherSlice":1784784045139927183},"usedName":{"valueName":{"identifier":"predMentionsName"}},"qualification":null},{"reference":{"otherSlice":6694129542108817590},"usedName":{"valueName":{"identifier":"keys"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":5798058776770892108},"usedName":{"valueName":{"identifier":"size"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":703656240602529328},"usedName":{"valueName":{"identifier":"allowExQuant"}},"qualification":null},{"reference":{"otherSlice":9137309922509137123},"usedName":{"valueName":{"identifier":"existentialContextError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["reifyConTys ::\n            JSONClass -> [(Name, Name)] -> Name -> Q ([Type], TyVarMap)","reifyConTys jc tpjs conName\n  = do info <- reify conName\n       (ctxt, uncTy) <- case info of\n                            DataConI _ ty _ -> fmap uncurryTy (expandSyn ty)\n                            _ -> error \"Must be a data constructor\"\n       let (argTys, [resTy]) = NE.splitAt (NE.length uncTy - 1) uncTy\n           unapResTy = unapplyTy resTy\n           jArity = arityInt jc\n           mbTvNames\n             = map varTToNameMaybe $\n                 NE.drop (NE.length unapResTy - jArity) unapResTy\n           tvMap\n             = M.fromList . catMaybes $\n                 zipWith\n                   (\\ mbTvName tpj -> fmap (\\ tvName -> (tvName, tpj)) mbTvName)\n                   mbTvNames\n                   tpjs\n       if\n         (any (`predMentionsName` M.keys tvMap) ctxt ||\n            M.size tvMap < jArity)\n           && not (allowExQuant jc)\n         then existentialContextError conName else return (argTys, tvMap)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"]}}