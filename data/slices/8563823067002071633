{"sliceID":8563823067002071633,"uses":[{"reference":{"otherSlice":5526943578458423999},"usedName":{"typeName":{"identifier":"EncodeProduct"}},"qualification":null},{"reference":{"builtinModule":"GHC.Generics"},"usedName":{"typeName":{"operator":":*:"}},"qualification":null},{"reference":{"otherSlice":5526943578458423999},"usedName":{"valueName":{"identifier":"encodeProduct"}},"qualification":null},{"reference":{"builtinModule":"GHC.Generics"},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"operator":":*:"}},"qualification":null},{"reference":{"otherSlice":7721714347464982760},"usedName":{"valueName":{"identifier":"omitNothingFields"}},"qualification":null},{"reference":{"otherSlice":4693941012606838655},"usedName":{"valueName":{"identifier":"econcat"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"intersperse"}},"qualification":null},{"reference":{"otherSlice":2699211246990115058},"usedName":{"valueName":{"identifier":"comma"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"filter"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":6533343781217147937},"usedName":{"valueName":{"identifier":"nullEncoding"}},"qualification":"E"},{"reference":{"otherSlice":1218866858538590336},"usedName":{"valueName":{"operator":">*<"}},"qualification":null}],"fragment":["instance (EncodeProduct arity a, EncodeProduct arity b) =>\n         EncodeProduct arity (a :*: b)\n         where\n        encodeProduct opts targs (a :*: b)\n          | omitNothingFields opts =\n            E.econcat $\n              intersperse E.comma $\n                filter (not . E.nullEncoding)\n                  [encodeProduct opts targs a, encodeProduct opts targs b]\n        encodeProduct opts targs (a :*: b)\n          = encodeProduct opts targs a >*< encodeProduct opts targs b"],"instances":[],"language":{"extensions":["DefaultSignatures","EmptyDataDecls","FlexibleContexts","FlexibleInstances","FunctionalDependencies","GADTs","MultiParamTypeClasses","NamedFieldPuns","OverloadedStrings","PatternGuards","RecordWildCards","ScopedTypeVariables","TypeOperators","TypeSynonymInstances","UndecidableInstances","PolyKinds","NondecreasingIndentation","ExplicitForAll"]}}