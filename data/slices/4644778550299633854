{"sliceID":4644778550299633854,"uses":[{"reference":{"otherSlice":5909825776624895526},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IPRTable"}},"qualification":null},{"reference":{"otherSlice":5909825776624895526},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"IPRTable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4444249706165610869},"usedName":{"valueName":{"identifier":"keyToTestBit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7674542317292652376},"usedName":{"valueName":{"operator":">:>"}},"qualification":null},{"reference":{"otherSlice":7910129191973440903},"usedName":{"valueName":{"identifier":"isLeft"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":5155699878751707079},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":8823746740903587681},"usedName":{"typeName":{"identifier":"Routable"}},"qualification":null},{"reference":{"otherSlice":2569528546214581441},"usedName":{"typeName":{"identifier":"AddrRange"}},"qualification":null},{"reference":{"otherSlice":5909825776624895526},"usedName":{"typeName":{"identifier":"IPRTable"}},"qualification":null}],"fragment":["insert ::\n         (Routable k) => AddrRange k -> a -> IPRTable k a -> IPRTable k a","insert k1 v1 Nil = Node k1 tb1 (Just v1) Nil Nil\n  where tb1 = keyToTestBit k1\ninsert k1 v1 s@(Node k2 tb2 v2 l r)\n  | k1 == k2 = Node k1 tb1 (Just v1) l r\n  | k2 >:> k1 =\n    if isLeft k1 tb2 then Node k2 tb2 v2 (insert k1 v1 l) r else\n      Node k2 tb2 v2 l (insert k1 v1 r)\n  | k1 >:> k2 =\n    if isLeft k2 tb1 then Node k1 tb1 (Just v1) s Nil else\n      Node k1 tb1 (Just v1) Nil s\n  | otherwise = let n = Node k1 tb1 (Just v1) Nil Nil in link n s\n  where tb1 = keyToTestBit k1"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}