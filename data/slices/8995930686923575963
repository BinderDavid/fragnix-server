{"sliceID":8995930686923575963,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7981965079560666501},"usedName":{"valueName":{"identifier":"getUnassignedPort"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4377208709601953920},"usedName":{"valueName":{"identifier":"bindPortGen"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"IOException"}},"qualification":null},{"reference":{"otherSlice":2347089666054590766},"usedName":{"typeName":{"identifier":"Socket"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7604145425993468127},"usedName":{"valueName":{"identifier":"skipUnassigned"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":1575450884604877623},"usedName":{"typeName":{"identifier":"SocketType"}},"qualification":null},{"reference":{"otherSlice":8298928511352979264},"usedName":{"typeName":{"identifier":"HostPreference"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["bindRandomPortGen ::\n                  SocketType -> HostPreference -> IO (Int, Socket)","bindRandomPortGen sockettype s = loop (30 :: Int)\n  where loop cnt\n          = do port <- getUnassignedPort\n               esocket <- try $ bindPortGen sockettype port s\n               case esocket :: Either IOException Socket of\n                   Left e | cnt <= 1 ->\n                            error $\n                              concat\n                                [\"Data.Streaming.Network.bindRandomPortGen: Could not get port. Last attempted: \",\n                                 show port, \". Exception was: \", show e]\n                          | otherwise ->\n                            do skipUnassigned 50\n                               loop $! cnt - 1\n                   Right socket -> return (port, socket)"],"instances":[],"language":{"extensions":["ScopedTypeVariables","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}