{"sliceID":6467305063291411130,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":5093213785792494048},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":"L"},{"reference":{"otherSlice":5593390695051419201},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3820064631054730068},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":null},{"reference":{"otherSlice":64226933075389339},"usedName":{"valueName":{"identifier":"takeEnd"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":750247439406187332},"usedName":{"valueName":{"identifier":"length"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeEnd :: Int64 -> Text -> Text","takeEnd n t0\n  | n <= 0 = empty\n  | otherwise = takeChunk n empty . L.reverse . toChunks $ t0\n  where takeChunk _ acc [] = acc\n        takeChunk i acc (t : ts)\n          | i <= l = chunk (T.takeEnd (fromIntegral i) t) acc\n          | otherwise = takeChunk (i - l) (Chunk t acc) ts\n          where l = fromIntegral (T.length t)"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}