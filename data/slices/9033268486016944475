{"sliceID":9033268486016944475,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"fst"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"sortBy"}},"qualification":null},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"on"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"otherSlice":2374795821211994760},"usedName":{"valueName":{"identifier":"split"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Float"},"usedName":{"typeName":{"identifier":"Double"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"otherSlice":8651598999625777298},"usedName":{"valueName":{"identifier":"count"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":5401519412162210958},"usedName":{"valueName":{"identifier":"breakSubstring"}},"qualification":"S"},{"reference":{"otherSlice":7107677885011947020},"usedName":{"valueName":{"identifier":"filter"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":4067596533135708555},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"S"},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"reads"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":846558884396738766},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"S8"},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["parseHttpAccept :: S.ByteString -> [S.ByteString]","parseHttpAccept\n  = map fst .\n      sortBy (rcompare `on` snd) .\n        map (addSpecificity . grabQ) . S.split 44\n  where rcompare :: (Double, Int) -> (Double, Int) -> Ordering\n        rcompare = flip compare\n        addSpecificity (s, q)\n          = let semicolons = S.count 59 s\n                stars = S.count 42 s\n              in (s, (q, semicolons - stars))\n        grabQ s\n          = let (s', q) = S.breakSubstring \";q=\" (S.filter (/= 32) s)\n                q' = S.takeWhile (/= 59) (S.drop 3 q)\n              in (s', readQ q')\n        readQ s\n          = case reads $ S8.unpack s of\n                (x, _) : _ -> x\n                _ -> 1.0"],"instances":[],"language":{"extensions":["OverloadedStrings","ExistentialQuantification","PatternGuards","TypeFamilies","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}