{"sliceID":3234431906652785900,"uses":[{"reference":{"otherSlice":2347089666054590766},"usedName":{"typeName":{"identifier":"Socket"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":2694158817781932873},"usedName":{"typeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":2347089666054590766},"usedName":{"constructorName":{"identifier":"MkSocket"},"constructorTypeName":{"identifier":"Socket"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"readMVar"}},"qualification":null},{"reference":{"otherSlice":6333717484987963283},"usedName":{"valueName":{"identifier":"isAcceptable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"ioError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"valueName":{"identifier":"userError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"otherSlice":2089503463097500348},"usedName":{"valueName":{"identifier":"sizeOfSockAddrByFamily"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Alloc"},"usedName":{"valueName":{"identifier":"allocaBytes"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Marshal.Utils"},"usedName":{"valueName":{"identifier":"with"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":5054964606985413964},"usedName":{"valueName":{"identifier":"throwSocketErrorIfMinus1RetryMayBlock"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.IO"},"usedName":{"valueName":{"identifier":"threadWaitRead"}},"qualification":null},{"reference":{"otherSlice":4509270548633274409},"usedName":{"valueName":{"identifier":"c_accept4"}},"qualification":null},{"reference":{"otherSlice":1053031603453933343},"usedName":{"valueName":{"identifier":"peekSockAddr"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"newMVar"}},"qualification":null},{"reference":{"otherSlice":8197619942740010703},"usedName":{"constructorName":{"identifier":"Connected"},"constructorTypeName":{"identifier":"SocketStatus"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null}],"fragment":["accept :: Socket -> IO (Socket, SockAddr)","accept sock@(MkSocket s family stype protocol status)\n  = do currentStatus <- readMVar status\n       okay <- isAcceptable sock\n       if not okay then\n         ioError $\n           userError $\n             \"Network.Socket.accept: can't accept socket (\" ++\n               show (family, stype, protocol) ++\n                 \") with status \" ++ show currentStatus\n         else\n         do let sz = sizeOfSockAddrByFamily family\n            allocaBytes sz $\n              \\ sockaddr ->\n                do with (fromIntegral sz) $\n                     \\ ptr_len ->\n                       do new_sock <- throwSocketErrorIfMinus1RetryMayBlock\n                                        \"Network.Socket.accept\"\n                                        (threadWaitRead (fromIntegral s))\n                                        (c_accept4 s sockaddr ptr_len (2048))\n                          addr <- peekSockAddr sockaddr\n                          new_status <- newMVar Connected\n                          return ((MkSocket new_sock family stype protocol new_status), addr)"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ForeignFunctionInterface","TypeSynonymInstances","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}