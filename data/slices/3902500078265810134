{"sliceID":3902500078265810134,"uses":[{"reference":{"otherSlice":7468751483111131918},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"otherSlice":7983455372018825889},"usedName":{"valueName":{"identifier":"foldlM"}},"qualification":"Stream"},{"reference":{"otherSlice":4934197120472349047},"usedName":{"valueName":{"identifier":"chunks"}},"qualification":"MBundle"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":999351203523402733},"usedName":{"valueName":{"identifier":"checkSlice"}},"qualification":"Ck"},{"reference":{"otherSlice":2919479770736738958},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"otherSlice":7298166268752041815},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":7618513344290335766},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":7913830746686835807},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Chunk"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":2238287761135544806},"usedName":{"valueName":{"identifier":"unsafeGrow"}},"qualification":null},{"reference":{"otherSlice":379590328323930662},"usedName":{"valueName":{"identifier":"delay_inline"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"max"}},"qualification":null},{"reference":{"otherSlice":8225863265727170406},"usedName":{"valueName":{"identifier":"enlarge_delta"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":null},{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":1710731503429193408},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":"V"},{"reference":{"otherSlice":3847791896444983848},"usedName":{"typeName":{"identifier":"MBundle"}},"qualification":null},{"reference":{"otherSlice":3970253887441901225},"usedName":{"typeName":{"identifier":"Mutable"}},"qualification":"V"},{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null}],"fragment":["vmunstreamUnknown ::\n                    (PrimMonad m, V.Vector v a) =>\n                    MBundle m v a -> m (V.Mutable v (PrimState m) a)","vmunstreamUnknown s\n  = do v <- unsafeNew 0\n       (v', n) <- Stream.foldlM copyChunk (v, 0) (MBundle.chunks s)\n       return $\n         ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 428) Ck.Internal)\n           \"munstreamUnknown\"\n           0\n           n\n           (length v')\n           $ unsafeSlice 0 n v'\n  where {-# INLINE [0] copyChunk #-}\n        copyChunk (v, i) (Chunk n f)\n          = do let j = i + n\n               v' <- if basicLength v < j then\n                       unsafeGrow v\n                         (delay_inline max (enlarge_delta v) (j - basicLength v))\n                       else return v\n               ((Ck.checkSlice \"Data/Vector/Generic/Mutable.hs\" 438) Ck.Internal)\n                 \"munstreamUnknown.copyChunk\"\n                 i\n                 n\n                 (length v')\n                 $ f (basicUnsafeSlice i n v')\n               return (v', j)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FlexibleContexts","BangPatterns","TypeFamilies","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}