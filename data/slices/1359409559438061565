{"sliceID":1359409559438061565,"uses":[{"reference":{"builtinModule":"Control.Monad.IO.Class"},"usedName":{"valueName":{"identifier":"liftIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"newMVar"}},"qualification":null},{"reference":{"otherSlice":9121217096605864202},"usedName":{"constructorName":{"identifier":"BodyUntouched"},"constructorTypeName":{"identifier":"RequestBodyState"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"requestBody"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"takeMVar"}},"qualification":null},{"reference":{"builtinModule":"GHC.MVar"},"usedName":{"valueName":{"identifier":"putMVar"}},"qualification":null},{"reference":{"otherSlice":9121217096605864202},"usedName":{"constructorName":{"identifier":"BodyCorrupted"},"constructorTypeName":{"identifier":"RequestBodyState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"otherSlice":9121217096605864202},"usedName":{"constructorName":{"identifier":"BodyCached"},"constructorTypeName":{"identifier":"RequestBodyState"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"BL"},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"throw"}},"qualification":null},{"reference":{"otherSlice":8108930466931771217},"usedName":{"constructorName":{"identifier":"BodyPartiallyStreamed"},"constructorTypeName":{"identifier":"BodyPartiallyStreamed"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"BL"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"otherSlice":6676997269845548905},"usedName":{"valueName":{"identifier":"getRequestBodyType"}},"qualification":"Parse"},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"BL"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":239988520105816943},"usedName":{"valueName":{"identifier":"parseRequestBody"}},"qualification":null},{"reference":{"otherSlice":7516753090012211395},"usedName":{"valueName":{"identifier":"lbsBackEnd"}},"qualification":"Parse"},{"reference":{"otherSlice":8251471587673654026},"usedName":{"valueName":{"identifier":"strictByteStringToLazyText"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":2190871070939894623},"usedName":{"valueName":{"identifier":"parseEncodedParams"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"rawQueryString"}},"qualification":null},{"reference":{"otherSlice":2584056387266545663},"usedName":{"constructorName":{"identifier":"Env"},"constructorTypeName":{"identifier":"ActionEnv"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.IO.Class"},"usedName":{"typeName":{"identifier":"MonadIO"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"typeName":{"identifier":"Request"}},"qualification":null},{"reference":{"otherSlice":6290599581847864836},"usedName":{"typeName":{"identifier":"Param"}},"qualification":null},{"reference":{"otherSlice":2584056387266545663},"usedName":{"typeName":{"identifier":"ActionEnv"}},"qualification":null}],"fragment":["mkEnv :: forall m . MonadIO m => Request -> [Param] -> m ActionEnv","mkEnv req captures\n  = do bodyState <- liftIO $ newMVar BodyUntouched\n       let rbody = requestBody req\n           takeAll ::\n                   ([B.ByteString] -> IO [B.ByteString]) -> IO [B.ByteString]\n           takeAll prefix\n             = rbody >>=\n                 \\ b -> if B.null b then prefix [] else takeAll (prefix . (b :))\n           safeBodyReader :: IO B.ByteString\n           safeBodyReader\n             = do state <- takeMVar bodyState\n                  let direct = putMVar bodyState BodyCorrupted >> rbody\n                  case state of\n                      s@(BodyCached _ []) -> do putMVar bodyState s\n                                                return B.empty\n                      BodyCached b (chunk : rest) -> do putMVar bodyState $\n                                                          BodyCached b rest\n                                                        return chunk\n                      BodyUntouched -> direct\n                      BodyCorrupted -> direct\n           bs :: IO BL.ByteString\n           bs\n             = do state <- takeMVar bodyState\n                  case state of\n                      s@(BodyCached b _) -> do putMVar bodyState s\n                                               return b\n                      BodyCorrupted -> throw BodyPartiallyStreamed\n                      BodyUntouched -> do chunks <- takeAll return\n                                          let b = BL.fromChunks chunks\n                                          putMVar bodyState $ BodyCached b chunks\n                                          return b\n           shouldParseBody = isJust $ Parse.getRequestBodyType req\n       (formparams, fs) <- if shouldParseBody then\n                             liftIO $\n                               do wholeBody <- BL.toChunks `fmap` bs\n                                  parseRequestBody wholeBody Parse.lbsBackEnd req\n                             else return ([], [])\n       let convert (k, v)\n             = (strictByteStringToLazyText k, strictByteStringToLazyText v)\n           parameters = captures ++ map convert formparams ++ queryparams\n           queryparams = parseEncodedParams $ rawQueryString req\n       return $\n         Env req parameters bs safeBodyReader\n           [(strictByteStringToLazyText k, fi) | (k, fi) <- fs]"],"instances":[],"language":{"extensions":["FlexibleContexts","FlexibleInstances","OverloadedStrings","RankNTypes","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}