{"sliceID":1382045781482501156,"uses":[{"reference":{"otherSlice":7787309955308033231},"usedName":{"valueName":{"identifier":"toPair"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":5151236523523606238},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"otherSlice":8004619576762515405},"usedName":{"valueName":{"identifier":"bin"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":555828902643222699},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8670052852832108484},"usedName":{"typeName":{"identifier":"IntMap"}},"qualification":null}],"fragment":["partitionWithKey ::\n                 (Key -> a -> Bool) -> IntMap a -> (IntMap a, IntMap a)","partitionWithKey predicate0 t0 = toPair $ go predicate0 t0\n  where go predicate t\n          = case t of\n                Bin p m l r -> let (l1 :*: l2) = go predicate l\n                                   (r1 :*: r2) = go predicate r\n                                 in bin p m l1 r1 :*: bin p m l2 r2\n                Tip k x | predicate k x -> (t :*: Nil)\n                        | otherwise -> (Nil :*: t)\n                Nil -> (Nil :*: Nil)"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}