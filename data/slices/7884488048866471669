{"sliceID":7884488048866471669,"uses":[{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Nil"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2311309294628532666},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"otherSlice":3855045874624644727},"usedName":{"valueName":{"identifier":"nomatch"}},"qualification":null},{"reference":{"otherSlice":5010666227755546614},"usedName":{"valueName":{"identifier":"merge"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":7074760854266457307},"usedName":{"valueName":{"identifier":"zero"}},"qualification":null},{"reference":{"otherSlice":3545442061195933811},"usedName":{"valueName":{"identifier":"unsafeInsertNew"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":6658013581939880226},"usedName":{"typeName":{"identifier":"Key"}},"qualification":null},{"reference":{"otherSlice":399320570619546538},"usedName":{"typeName":{"identifier":"IntPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["unsafeInsertWithIncreasePriorityView ::\n                                       Ord p =>\n                                       (p -> v -> p -> v -> (p, v)) ->\n                                         Key -> p -> v -> IntPSQ p v -> (Maybe (p, v), IntPSQ p v)","unsafeInsertWithIncreasePriorityView f k p x t0\n  = case go t0 of\n        (# t, mbPX #) -> (mbPX, t)\n  where go t\n          = case t of\n                Nil -> (# Tip k p x, Nothing #)\n                Tip k' p' x' | k == k' ->\n                               case f p x p' x' of\n                                   (!fp, !fx) -> (# Tip k fp fx, Just (p', x') #)\n                             | otherwise -> (# link k' p' x' k (Tip k p x) Nil, Nothing #)\n                Bin k' p' x' m l r | nomatch k k' m ->\n                                     let t' = merge m l r in\n                                       t' `seq`\n                                         let t'' = link k' p' x' k (Tip k p x) t' in\n                                           t'' `seq` (# t'', Nothing #)\n                                   | k == k' ->\n                                     case f p x p' x' of\n                                         (!fp, !fx) | zero k m ->\n                                                      let t' = merge m (unsafeInsertNew k fp fx l) r\n                                                        in t' `seq` (# t', Just (p', x') #)\n                                                    | otherwise ->\n                                                      let t' = merge m l (unsafeInsertNew k fp fx r)\n                                                        in t' `seq` (# t', Just (p', x') #)\n                                   | zero k m ->\n                                     case go l of\n                                         (# l', mbPX #) -> l' `seq` (# Bin k' p' x' m l' r, mbPX #)\n                                   | otherwise ->\n                                     case go r of\n                                         (# r', mbPX #) -> r' `seq` (# Bin k' p' x' m l r', mbPX #)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}