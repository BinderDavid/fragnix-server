{"sliceID":2964803535997452098,"uses":[{"reference":{"otherSlice":1105906692949335211},"usedName":{"constructorName":{"identifier":"Seq"},"constructorTypeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8687904603722479860},"usedName":{"constructorName":{"identifier":"Elem"},"constructorTypeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":8687904603722479860},"usedName":{"typeName":{"identifier":"Elem"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":1105906692949335211},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["mapWithIndex :: (Int -> a -> b) -> Seq a -> Seq b","mapWithIndex f' (Seq xs')\n  = Seq $ mapWithIndexTree (\\ s (Elem a) -> Elem (f' s a)) 0 xs'\n  where {-# SPECIALISE mapWithIndexTree ::\n                         (Int -> Elem y -> b) -> Int -> FingerTree (Elem y) -> FingerTree b\n                       #-}\n        \n        {-# SPECIALISE mapWithIndexTree ::\n                         (Int -> Node y -> b) -> Int -> FingerTree (Node y) -> FingerTree b\n                       #-}\n        \n        mapWithIndexTree ::\n                           Sized a => (Int -> a -> b) -> Int -> FingerTree a -> FingerTree b\n        mapWithIndexTree _ !_s EmptyT = EmptyT\n        mapWithIndexTree f s (Single xs) = Single $ f s xs\n        mapWithIndexTree f s (Deep n pr m sf)\n          = Deep n (mapWithIndexDigit f s pr)\n              (mapWithIndexTree (mapWithIndexNode f) sPspr m)\n              (mapWithIndexDigit f sPsprm sf)\n          where !sPspr = s + size pr\n                !sPsprm = sPspr + size m\n        \n        {-# SPECIALISE mapWithIndexDigit ::\n                         (Int -> Elem y -> b) -> Int -> Digit (Elem y) -> Digit b #-}\n        \n        {-# SPECIALISE mapWithIndexDigit ::\n                         (Int -> Node y -> b) -> Int -> Digit (Node y) -> Digit b #-}\n        \n        mapWithIndexDigit ::\n                            Sized a => (Int -> a -> b) -> Int -> Digit a -> Digit b\n        mapWithIndexDigit f !s (One a) = One (f s a)\n        mapWithIndexDigit f s (Two a b) = Two (f s a) (f sPsa b)\n          where !sPsa = s + size a\n        mapWithIndexDigit f s (Three a b c)\n          = Three (f s a) (f sPsa b) (f sPsab c)\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b\n        mapWithIndexDigit f s (Four a b c d)\n          = Four (f s a) (f sPsa b) (f sPsab c) (f sPsabc d)\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b\n                !sPsabc = sPsab + size c\n        \n        {-# SPECIALISE mapWithIndexNode ::\n                         (Int -> Elem y -> b) -> Int -> Node (Elem y) -> Node b #-}\n        \n        {-# SPECIALISE mapWithIndexNode ::\n                         (Int -> Node y -> b) -> Int -> Node (Node y) -> Node b #-}\n        \n        mapWithIndexNode ::\n                           Sized a => (Int -> a -> b) -> Int -> Node a -> Node b\n        mapWithIndexNode f s (Node2 ns a b) = Node2 ns (f s a) (f sPsa b)\n          where !sPsa = s + size a\n        mapWithIndexNode f s (Node3 ns a b c)\n          = Node3 ns (f s a) (f sPsa b) (f sPsab c)\n          where !sPsa = s + size a\n                !sPsab = sPsa + size b"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}