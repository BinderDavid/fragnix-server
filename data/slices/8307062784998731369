{"sliceID":8307062784998731369,"uses":[{"reference":{"otherSlice":203151619404684038},"usedName":{"valueName":{"identifier":"isAbsolute"}},"qualification":null},{"reference":{"otherSlice":8867078443176770290},"usedName":{"constructorName":{"identifier":"ListT"},"constructorTypeName":{"identifier":"ListT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6570118788296286238},"usedName":{"valueName":{"operator":"</>"}},"qualification":null},{"reference":{"otherSlice":7642891578229450761},"usedName":{"valueName":{"identifier":"doesFileExist"}},"qualification":null},{"reference":{"otherSlice":1375110386183348291},"usedName":{"valueName":{"identifier":"andM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"otherSlice":8867078443176770290},"usedName":{"typeName":{"identifier":"ListT"}},"qualification":null}],"fragment":["findFilesWithLazy ::\n                  (FilePath -> IO Bool) -> [FilePath] -> String -> ListT IO FilePath","findFilesWithLazy f dirs path\n  | isAbsolute path = ListT (find [\"\"])\n  | otherwise = ListT (find dirs)\n  where find [] = return Nothing\n        find (d : ds)\n          = do let p = d </> path\n               found <- doesFileExist p `andM` f p\n               if found then return (Just (p, ListT (find ds))) else find ds"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}