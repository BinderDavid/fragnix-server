{"sliceID":8420855138386412782,"uses":[{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":7978139750567819911},"usedName":{"typeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"otherSlice":2436757586192477698},"usedName":{"valueName":{"identifier":"getSymbolicLinkStatus"}},"qualification":"PosixF"},{"reference":{"otherSlice":6171068598252386237},"usedName":{"valueName":{"identifier":"isRegularFile"}},"qualification":"PosixF"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":7978139750567819911},"usedName":{"constructorName":{"identifier":"FTFile"},"constructorTypeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"otherSlice":4849985943443332679},"usedName":{"valueName":{"identifier":"isDirectory"}},"qualification":"PosixF"},{"reference":{"otherSlice":7978139750567819911},"usedName":{"constructorName":{"identifier":"FTDirectory"},"constructorTypeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"otherSlice":2788002884611861048},"usedName":{"valueName":{"identifier":"isSymbolicLink"}},"qualification":"PosixF"},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7740045047843181165},"usedName":{"valueName":{"identifier":"getFileStatus"}},"qualification":"PosixF"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"IOException"}},"qualification":null},{"reference":{"otherSlice":7978139750567819911},"usedName":{"constructorName":{"identifier":"FTOther"},"constructorTypeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7978139750567819911},"usedName":{"constructorName":{"identifier":"FTFileSym"},"constructorTypeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"otherSlice":7978139750567819911},"usedName":{"constructorName":{"identifier":"FTDirectorySym"},"constructorTypeName":{"identifier":"FileType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null}],"fragment":["getFileType :: FilePath -> IO FileType","getFileType fp\n  = do s <- PosixF.getSymbolicLinkStatus fp\n       case () of\n           () | PosixF.isRegularFile s -> return FTFile\n              | PosixF.isDirectory s -> return FTDirectory\n              | PosixF.isSymbolicLink s ->\n                do es' <- try $ PosixF.getFileStatus fp\n                   case es' of\n                       Left (_ :: IOException) -> return FTOther\n                       Right s' | PosixF.isRegularFile s' -> return FTFileSym\n                                | PosixF.isDirectory s' -> return FTDirectorySym\n                                | otherwise -> return FTOther\n              | otherwise -> return FTOther"],"instances":[],"language":{"extensions":["DeriveDataTypeable","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}