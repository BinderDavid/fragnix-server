{"sliceID":254214844584074044,"uses":[{"reference":{"otherSlice":6412538906221599864},"usedName":{"constructorName":{"identifier":"ActionT"},"constructorTypeName":{"identifier":"ActionT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftM"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":2584056387266545663},"usedName":{"valueName":{"identifier":"getParams"}},"qualification":null},{"reference":{"otherSlice":2904307579092211855},"usedName":{"valueName":{"identifier":"ask"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1725656277633936222},"usedName":{"valueName":{"identifier":"raise"}},"qualification":null},{"reference":{"otherSlice":3717595593305571482},"usedName":{"valueName":{"identifier":"stringError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":5998703756803487299},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"otherSlice":7129524189737505986},"usedName":{"valueName":{"identifier":"next"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":7247665805492195748},"usedName":{"valueName":{"identifier":"parseParam"}},"qualification":null},{"reference":{"otherSlice":7247665805492195748},"usedName":{"typeName":{"identifier":"Parsable"}},"qualification":null},{"reference":{"otherSlice":3717595593305571482},"usedName":{"typeName":{"identifier":"ScottyError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"typeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"otherSlice":6412538906221599864},"usedName":{"typeName":{"identifier":"ActionT"}},"qualification":null}],"fragment":["param ::\n        (Parsable a, ScottyError e, Monad m) => T.Text -> ActionT e m a","param k\n  = do val <- ActionT $ liftM (lookup k . getParams) ask\n       case val of\n           Nothing -> raise $\n                        stringError $ \"Param: \" ++ T.unpack k ++ \" not found!\"\n           Just v -> either (const next) return $ parseParam v"],"instances":[],"language":{"extensions":["OverloadedStrings","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}