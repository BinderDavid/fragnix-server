{"sliceID":5029403727454576811,"uses":[{"reference":{"otherSlice":7535420074696502581},"usedName":{"valueName":{"identifier":"runText"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":577283740759386957},"usedName":{"valueName":{"identifier":"new"}},"qualification":"A"},{"reference":{"otherSlice":1661752722654164929},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateNone"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"otherSlice":5133942697012219533},"usedName":{"valueName":{"identifier":"throwDecodeError"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"B"},{"reference":{"otherSlice":6771948077151099173},"usedName":{"valueName":{"identifier":"decode"}},"qualification":null},{"reference":{"otherSlice":4601992657548380777},"usedName":{"constructorName":{"identifier":"UtfGround"},"constructorTypeName":{"identifier":"Utf"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateBackslash"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":378213788103504155},"usedName":{"valueName":{"identifier":"writeAndReturn"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":8256774115447311254},"usedName":{"valueName":{"identifier":"write"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateUtf"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateU0"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"otherSlice":8425186909476430721},"usedName":{"valueName":{"identifier":"decodeHex"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateU1"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateU2"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateU3"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateS0"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateS1"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateSU0"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateSU1"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateSU2"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"otherSlice":3712566241345869849},"usedName":{"constructorName":{"identifier":"StateSU3"},"constructorTypeName":{"identifier":"State"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["unescapeText' :: ByteString -> Text","unescapeText' bs\n  = runText $\n      \\ done ->\n        do dest <- A.new len\n           (pos, finalState) <- B.foldl' (f' dest) (return (0, StateNone)) bs\n           when (finalState /= StateNone || pos > len) throwDecodeError\n           done dest pos\n  where len = B.length bs\n        runUtf dest pos st point c\n          = case decode st point c of\n                (UtfGround, 92) -> return (pos, StateBackslash)\n                (UtfGround, w) | w <= 65535 ->\n                                 writeAndReturn dest pos (fromIntegral w) StateNone\n                (UtfGround, w) -> do write dest pos\n                                       (55232 + fromIntegral (w `shiftR` 10))\n                                     writeAndReturn dest (pos + 1)\n                                       (56320 + fromIntegral (w .&. 1023))\n                                       StateNone\n                (st', p) -> return (pos, StateUtf st' p)\n        \n        {-# INLINE runUtf #-}\n        f' dest m c = m >>= \\ s -> f dest s c\n        \n        {-# INLINE f' #-}\n        f dest (pos, StateNone) c = runUtf dest pos UtfGround 0 c\n        f dest (pos, StateUtf st point) c = runUtf dest pos st point c\n        f dest (pos, StateBackslash) 34\n          = writeAndReturn dest pos 34 StateNone\n        f dest (pos, StateBackslash) 92\n          = writeAndReturn dest pos 92 StateNone\n        f dest (pos, StateBackslash) 47\n          = writeAndReturn dest pos 47 StateNone\n        f dest (pos, StateBackslash) 98\n          = writeAndReturn dest pos 8 StateNone\n        f dest (pos, StateBackslash) 102\n          = writeAndReturn dest pos 12 StateNone\n        f dest (pos, StateBackslash) 110\n          = writeAndReturn dest pos 10 StateNone\n        f dest (pos, StateBackslash) 114\n          = writeAndReturn dest pos 13 StateNone\n        f dest (pos, StateBackslash) 116\n          = writeAndReturn dest pos 9 StateNone\n        f _ (pos, StateBackslash) 117 = return (pos, StateU0)\n        f _ (_, StateBackslash) _ = throwDecodeError\n        f _ (pos, StateU0) c\n          = let w = decodeHex c in return (pos, StateU1 (w `shiftL` 12))\n        f _ (pos, StateU1 w') c\n          = let w = decodeHex c in\n              return (pos, StateU2 (w' .|. (w `shiftL` 8)))\n        f _ (pos, StateU2 w') c\n          = let w = decodeHex c in\n              return (pos, StateU3 (w' .|. (w `shiftL` 4)))\n        f dest (pos, StateU3 w') c\n          = let w = decodeHex c in\n              let u = w' .|. w in\n                let st\n                      | u >= 55296 && u <= 56319 = StateS0\n                      | u >= 56320 && u <= 57343 = throwDecodeError\n                      | otherwise = StateNone\n                  in writeAndReturn dest pos u st\n        f _ (pos, StateS0) 92 = return (pos, StateS1)\n        f _ (_, StateS0) _ = throwDecodeError\n        f _ (pos, StateS1) 117 = return (pos, StateSU0)\n        f _ (_, StateS1) _ = throwDecodeError\n        f _ (pos, StateSU0) c\n          = let w = decodeHex c in return (pos, StateSU1 (w `shiftL` 12))\n        f _ (pos, StateSU1 w') c\n          = let w = decodeHex c in\n              return (pos, StateSU2 (w' .|. (w `shiftL` 8)))\n        f _ (pos, StateSU2 w') c\n          = let w = decodeHex c in\n              return (pos, StateSU3 (w' .|. (w `shiftL` 4)))\n        f dest (pos, StateSU3 w') c\n          = let w = decodeHex c in\n              let u = w' .|. w in\n                if u < 56320 || u > 57343 then throwDecodeError else\n                  writeAndReturn dest pos u StateNone\n        \n        {-# INLINE f #-}"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}