{"sliceID":8879135789730971005,"uses":[{"reference":{"otherSlice":5577026005116061919},"usedName":{"constructorName":{"identifier":"HashPSQ"},"constructorTypeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"otherSlice":2065983683391021367},"usedName":{"valueName":{"identifier":"alterMin"}},"qualification":"IntPSQ"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":258033232516555062},"usedName":{"constructorName":{"identifier":"B"},"constructorTypeName":{"identifier":"Bucket"}},"qualification":null},{"reference":{"otherSlice":5065041652914289178},"usedName":{"valueName":{"identifier":"minView"}},"qualification":"OrdPSQ"},{"reference":{"otherSlice":6947997737051125680},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":5577026005116061919},"usedName":{"typeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["minView ::\n          (Hashable k, Ord k, Ord p) =>\n          HashPSQ k p v -> Maybe (k, p, v, HashPSQ k p v)","minView (HashPSQ ipsq)\n  = case IntPSQ.alterMin f ipsq of\n        (Nothing, _) -> Nothing\n        (Just (k, p, x), ipsq') -> Just (k, p, x, HashPSQ ipsq')\n  where f Nothing = (Nothing, Nothing)\n        f (Just (h, p, B k x os))\n          = case OrdPSQ.minView os of\n                Nothing -> (Just (k, p, x), Nothing)\n                Just (k', p', x', os') -> (Just (k, p, x),\n                                           Just (h, p', B k' x' os'))"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","GeneralizedNewtypeDeriving","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}