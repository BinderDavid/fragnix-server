{"sliceID":7926578881220185078,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":5817155485589370063},"usedName":{"typeName":{"identifier":"Array"}},"qualification":"A"},{"reference":{"otherSlice":3998322101007631306},"usedName":{"typeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"otherSlice":5661105965881527651},"usedName":{"valueName":{"identifier":"run"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4059488043276008971},"usedName":{"valueName":{"identifier":"map"}},"qualification":"A"},{"reference":{"otherSlice":3998322101007631306},"usedName":{"constructorName":{"identifier":"L"},"constructorTypeName":{"identifier":"Leaf"}},"qualification":null},{"reference":{"otherSlice":2173241255591372307},"usedName":{"valueName":{"identifier":"indexOf"}},"qualification":null},{"reference":{"otherSlice":8747437103571535734},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":"A"},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"otherSlice":7808444151530224948},"usedName":{"valueName":{"identifier":"length"}},"qualification":"A"},{"reference":{"otherSlice":7775656487906570083},"usedName":{"valueName":{"identifier":"new_"}},"qualification":"A"},{"reference":{"otherSlice":8119243005292685083},"usedName":{"valueName":{"identifier":"copy"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2374614385050159493},"usedName":{"valueName":{"identifier":"index"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2238804280971673479},"usedName":{"valueName":{"identifier":"indexM"}},"qualification":"A"},{"reference":{"otherSlice":410507955169915919},"usedName":{"valueName":{"identifier":"write"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null}],"fragment":["updateOrConcatWithKey ::\n                        Eq k =>\n                        (k -> v -> v -> v) ->\n                          A.Array (Leaf k v) -> A.Array (Leaf k v) -> A.Array (Leaf k v)","updateOrConcatWithKey f ary1 ary2\n  = A.run $\n      do let indices = A.map (\\ (L k _) -> indexOf k ary1) ary2\n         let nOnly2 = A.foldl' (\\ n -> maybe (n + 1) (const n)) 0 indices\n         let n1 = A.length ary1\n         let n2 = A.length ary2\n         mary <- A.new_ (n1 + nOnly2)\n         A.copy ary1 0 mary 0 n1\n         let go !iEnd !i2\n               | i2 >= n2 = return ()\n               | otherwise =\n                 case A.index indices i2 of\n                     Just i1 -> do L k v1 <- A.indexM ary1 i1\n                                   L _ v2 <- A.indexM ary2 i2\n                                   A.write mary i1 (L k (f k v1 v2))\n                                   go iEnd (i2 + 1)\n                     Nothing -> do A.write mary iEnd =<< A.indexM ary2 i2\n                                   go (iEnd + 1) (i2 + 1)\n         go n1 0\n         return mary"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","MagicHash","ScopedTypeVariables","PatternGuards","RoleAnnotations","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}