{"sliceID":1731092673794673266,"uses":[{"reference":{"otherSlice":1684953695762370946},"usedName":{"constructorName":{"identifier":"C"},"constructorTypeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7690667073431499011},"usedName":{"valueName":{"identifier":"prompt'"}},"qualification":null},{"reference":{"otherSlice":1684953695762370946},"usedName":{"valueName":{"identifier":"runCont"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":6339437961767205395},"usedName":{"typeName":{"identifier":"Consume"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"},{"reference":{"otherSlice":1684953695762370946},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null}],"fragment":["withInputChunks ::\n                s ->\n                  Consume s ->\n                    ([B.ByteString] -> b) -> ([B.ByteString] -> Get b) -> Get b","withInputChunks initS consume onSucc onFail = go initS []\n  where go state acc\n          = C $\n              \\ inp ks ->\n                case consume state inp of\n                    Left state' -> do let acc' = inp : acc\n                                      prompt' (runCont (onFail (reverse acc')) B.empty ks)\n                                        (\\ str' -> runCont (go state' acc') str' ks)\n                    Right (want, rest) -> do ks rest (onSucc (reverse (want : acc)))"],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}