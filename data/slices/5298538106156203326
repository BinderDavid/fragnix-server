{"sliceID":5298538106156203326,"uses":[{"reference":{"otherSlice":4735960143663518883},"usedName":{"valueName":{"identifier":"dispatchParseJSON"}},"qualification":null},{"reference":{"otherSlice":6628461094791741830},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"V"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":5986968119246965674},"usedName":{"valueName":{"identifier":"length"}},"qualification":"V"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":6026677325496049154},"usedName":{"valueName":{"identifier":"parseTypeMismatch"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7400853757544099605},"usedName":{"valueName":{"identifier":"matchFailed"}},"qualification":null},{"reference":{"otherSlice":3720735402915720453},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":143484768843649221},"usedName":{"typeName":{"identifier":"TyVarMap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null}],"fragment":["parseProduct ::\n             JSONClass ->\n               TyVarMap -> [Type] -> Name -> Name -> Integer -> [Q Match]","parseProduct jc tvMap argTys tName conName numArgs\n  = [do arr <- newName \"arr\"\n        let x : xs\n              = [dispatchParseJSON jc conName tvMap argTy `appE`\n                   infixApp (varE arr) [| V.unsafeIndex |] (litE $ integerL ix)\n                 | (argTy, ix) <- zip argTys [0 .. numArgs - 1]]\n        match (conP 'Array [varP arr])\n          (normalB $\n             condE\n               (infixApp ([| V.length |] `appE` varE arr) [| (==) |]\n                  (litE $ integerL numArgs))\n               (foldl' (\\ a b -> infixApp a [| (<*>) |] b)\n                  (infixApp (conE conName) [| (<$>) |] x)\n                  xs)\n               (parseTypeMismatch tName conName\n                  (litE $ stringL $ \"Array of length \" ++ show numArgs)\n                  (infixApp (litE $ stringL \"Array of length \") [| (++) |]\n                     ([| show . V.length |] `appE` varE arr))))\n          [],\n     matchFailed tName conName \"Array\"]"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"]}}