{"sliceID":3948089628369838536,"uses":[{"reference":{"otherSlice":1868711746240202356},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"otherSlice":3125212713908546964},"usedName":{"constructorName":{"identifier":"Just1"},"constructorTypeName":{"identifier":"Justify"}},"qualification":null},{"reference":{"otherSlice":4197925349042282867},"usedName":{"valueName":{"identifier":"larger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":5528339794293630653},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":3125212713908546964},"usedName":{"constructorName":{"identifier":"Just2"},"constructorTypeName":{"identifier":"Justify"}},"qualification":null},{"reference":{"otherSlice":5528339794293630653},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":5528339794293630653},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Integral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":1868711746240202356},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["justifyLeftI ::\n               Integral a => a -> Char -> Stream Char -> Stream Char","justifyLeftI k c (Stream next0 s0 len)\n  = Stream next (Just1 0 s0) (larger (fromIntegral k) len)\n  where next (Just1 n s)\n          = case next0 s of\n                Done -> next (Just2 n s)\n                Skip s' -> Skip (Just1 n s')\n                Yield x s' -> Yield x (Just1 (n + 1) s')\n        next (Just2 n s)\n          | n < k = Yield c (Just2 (n + 1) s)\n          | otherwise = Done\n        \n        {-# INLINE next #-}"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","Rank2Types","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}