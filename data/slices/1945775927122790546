{"sliceID":1945775927122790546,"uses":[{"reference":{"otherSlice":1880869766440590388},"usedName":{"valueName":{"identifier":"zipWith'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7170338453733353521},"usedName":{"valueName":{"identifier":"zipWith3'"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"minimum"}},"qualification":null},{"reference":{"otherSlice":4612766933172929877},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":2227121330924139218},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"otherSlice":1105906692949335211},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["zipWith4 ::\n         (a -> b -> c -> d -> e) ->\n           Seq a -> Seq b -> Seq c -> Seq d -> Seq e","zipWith4 f s1 s2 s3 s4 = zipWith' ($) (zipWith3' f s1' s2' s3') s4'\n  where minLen = minimum [length s1, length s2, length s3, length s4]\n        s1' = take minLen s1\n        s2' = take minLen s2\n        s3' = take minLen s3\n        s4' = take minLen s4"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}