{"sliceID":6823867551867376010,"uses":[{"reference":{"otherSlice":6693766690905093622},"usedName":{"valueName":{"identifier":"std_in"}},"qualification":null},{"reference":{"otherSlice":2420987530687303004},"usedName":{"constructorName":{"identifier":"CreatePipe"},"constructorTypeName":{"identifier":"StdStream"}},"qualification":null},{"reference":{"otherSlice":6693766690905093622},"usedName":{"valueName":{"identifier":"std_out"}},"qualification":null},{"reference":{"otherSlice":6693766690905093622},"usedName":{"valueName":{"identifier":"std_err"}},"qualification":null},{"reference":{"otherSlice":2330216215171280394},"usedName":{"valueName":{"identifier":"withCreateProcess_"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hGetContents"}},"qualification":null},{"reference":{"otherSlice":6372831853298949288},"usedName":{"valueName":{"identifier":"withForkWait"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"evaluate"}},"qualification":"C"},{"reference":{"otherSlice":8122526006167035783},"usedName":{"valueName":{"identifier":"rnf"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad"},"usedName":{"valueName":{"identifier":"unless"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":8719197655102308129},"usedName":{"valueName":{"identifier":"ignoreSigPipe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Text"},"usedName":{"valueName":{"identifier":"hPutStr"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle"},"usedName":{"valueName":{"identifier":"hClose"}},"qualification":null},{"reference":{"otherSlice":6886756863672815612},"usedName":{"valueName":{"identifier":"waitForProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":6693766690905093622},"usedName":{"typeName":{"identifier":"CreateProcess"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"typeName":{"identifier":"ExitCode"}},"qualification":null}],"fragment":["readCreateProcessWithExitCode ::\n                              CreateProcess -> String -> IO (ExitCode, String, String)","readCreateProcessWithExitCode cp input\n  = do let cp_opts\n             = cp{std_in = CreatePipe, std_out = CreatePipe,\n                  std_err = CreatePipe}\n       withCreateProcess_ \"readCreateProcessWithExitCode\" cp_opts $\n         \\ (Just inh) (Just outh) (Just errh) ph ->\n           do out <- hGetContents outh\n              err <- hGetContents errh\n              withForkWait (C.evaluate $ rnf out) $\n                \\ waitOut ->\n                  withForkWait (C.evaluate $ rnf err) $\n                    \\ waitErr ->\n                      do unless (null input) $ ignoreSigPipe $ hPutStr inh input\n                         ignoreSigPipe $ hClose inh\n                         waitOut\n                         waitErr\n                         hClose outh\n                         hClose errh\n              ex <- waitForProcess ph\n              return (ex, out, err)"],"instances":[],"language":{"extensions":["ForeignFunctionInterface","InterruptibleFFI","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}