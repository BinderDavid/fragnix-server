{"sliceID":8634980840525510679,"uses":[{"reference":{"otherSlice":3113891009099257547},"usedName":{"valueName":{"identifier":"runP"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2529848261191992506},"usedName":{"valueName":{"identifier":"perhaps"}},"qualification":null},{"reference":{"otherSlice":4664798947739468981},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":3113891009099257547},"usedName":{"constructorName":{"identifier":"P"},"constructorTypeName":{"identifier":"IParser"}},"qualification":null},{"reference":{"otherSlice":3441936342929795854},"usedName":{"valueName":{"identifier":"decimal"}},"qualification":null},{"reference":{"otherSlice":5441077284268972420},"usedName":{"constructorName":{"identifier":"T"},"constructorTypeName":{"identifier":"T"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":750247439406187332},"usedName":{"valueName":{"identifier":"length"}},"qualification":"T"},{"reference":{"otherSlice":5173392314663077224},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"otherSlice":6867368015376501956},"usedName":{"valueName":{"identifier":"signa"}},"qualification":null},{"reference":{"otherSlice":5684737658496348964},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"^^"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"^"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Fractional"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"otherSlice":699628474123539544},"usedName":{"typeName":{"identifier":"Reader"}},"qualification":null}],"fragment":["floaty ::\n         Fractional a => (Integer -> Integer -> Integer -> a) -> Reader a","floaty f\n  = runP $\n      do sign <- perhaps '+' $ char (\\ c -> c == '-' || c == '+')\n         real <- P decimal\n         T fraction fracDigits <- perhaps (T 0 0) $\n                                    do _ <- char (== '.')\n                                       digits <- P $\n                                                   \\ t ->\n                                                     Right (T.length $ T.takeWhile isDigit t, t)\n                                       n <- P decimal\n                                       return $ T n digits\n         let e c = c == 'e' || c == 'E'\n         power <- perhaps 0 (char e >> signa (P decimal) :: Parser Int)\n         let n = if fracDigits == 0 then\n                   if power == 0 then fromIntegral real else\n                     fromIntegral real * (10 ^^ power)\n                   else\n                   if power == 0 then f real fraction (10 ^ fracDigits) else\n                     f real fraction (10 ^ fracDigits) * (10 ^^ power)\n         return $! if sign == '+' then n else -n"],"instances":[],"language":{"extensions":["OverloadedStrings","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}