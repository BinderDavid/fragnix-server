{"sliceID":8378984986734847041,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Functor"}},"qualification":null},{"reference":{"otherSlice":6611341608342455607},"usedName":{"typeName":{"identifier":"SmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":6350502882776271008},"usedName":{"valueName":{"identifier":"createSmallArray"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":1336222803606167606},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Function"},"usedName":{"valueName":{"identifier":"fix"}},"qualification":null},{"reference":{"otherSlice":6305159245959420917},"usedName":{"valueName":{"operator":"?"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":3408757399140055139},"usedName":{"valueName":{"identifier":"writeSmallArray"}},"qualification":null},{"reference":{"otherSlice":5643076820601837867},"usedName":{"valueName":{"identifier":"indexSmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<$"}},"qualification":null},{"reference":{"otherSlice":2217445715364175987},"usedName":{"valueName":{"identifier":"noOp"}},"qualification":null}],"fragment":["instance Functor SmallArray where\n        fmap f sa\n          = createSmallArray (length sa) (die \"fmap\" \"impossible\") $\n              \\ smb ->\n                fix ? 0 $\n                  \\ go i ->\n                    when (i < length sa) $\n                      writeSmallArray smb i (f $ indexSmallArray sa i) *> go (i + 1)\n        \n        {-# INLINE fmap #-}\n        x <$ sa = createSmallArray (length sa) x noOp"],"instances":[],"language":{"extensions":["MagicHash","RankNTypes","TypeFamilies","UnboxedTuples","DeriveTraversable","DeriveDataTypeable","GeneralizedNewtypeDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}