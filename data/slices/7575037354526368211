{"sliceID":7575037354526368211,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":5414550357964476688},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":1217799320961605858},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"otherSlice":8680191706454834021},"usedName":{"valueName":{"identifier":"lsplit"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null},{"reference":{"otherSlice":4645870123692490014},"usedName":{"valueName":{"identifier":"chunk"}},"qualification":"LI"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["breakFindAfter ::\n               S.ByteString ->\n                 L.ByteString -> ((L.ByteString, L.ByteString), Bool)","breakFindAfter pat | S.null pat = \\ str -> ((L.empty, str), True)\nbreakFindAfter pat = breaker . L.toChunks\n  where !patLen = S.length pat\n        lbrk = lazyBreaker True pat\n        breaker strs\n          = let (f, b) = lbrk strs\n                (f1, b1) = lsplit patLen b\n                mbpat = L.fromChunks f1\n              in ((foldr LI.chunk mbpat f, L.fromChunks b1), not (null b))"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}