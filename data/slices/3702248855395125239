{"sliceID":3702248855395125239,"uses":[{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"requestBodyLength"}},"qualification":null},{"reference":{"otherSlice":6197401285561738162},"usedName":{"valueName":{"identifier":"contentLength"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"requestHeaders"}},"qualification":null},{"reference":{"otherSlice":2778711971517543461},"usedName":{"constructorName":{"identifier":"KnownLength"},"constructorTypeName":{"identifier":"RequestBodyLength"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":526124633641226398},"usedName":{"valueName":{"identifier":"getRequestBody"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":8347118461982769886},"usedName":{"constructorName":{"identifier":"White"},"constructorTypeName":{"identifier":"Color"}},"qualification":null},{"reference":{"builtinModule":"Data.Monoid"},"usedName":{"valueName":{"operator":"<>"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concatMap"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"valueName":{"identifier":"either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":944960216155594653},"usedName":{"valueName":{"identifier":"decodeUtf8'"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"requestMethod"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"elem"}},"qualification":null},{"reference":{"builtinModule":"Control.Monad.IO.Class"},"usedName":{"valueName":{"identifier":"liftIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"queryString"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"fromMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":null},{"reference":{"otherSlice":2325900752127330681},"usedName":{"valueName":{"identifier":"hAccept"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":4266482746038848749},"usedName":{"valueName":{"identifier":"pack"}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4231822192820893145},"usedName":{"valueName":{"identifier":"getCurrentTime"}},"qualification":null},{"reference":{"otherSlice":8218805848122191995},"usedName":{"constructorName":{"identifier":"ResponseRaw"},"constructorTypeName":{"identifier":"Response"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4172527364435390105},"usedName":{"valueName":{"identifier":"statusBS"}},"qualification":null},{"reference":{"otherSlice":302108412312804940},"usedName":{"valueName":{"identifier":"msgBS"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mconcat"}},"qualification":null},{"reference":{"otherSlice":6405819244956783639},"usedName":{"valueName":{"identifier":"toLogStr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"rawPathInfo"}},"qualification":null},{"reference":{"otherSlice":8458556867292192892},"usedName":{"valueName":{"identifier":"diffUTCTime"}},"qualification":null},{"reference":{"otherSlice":6676997269845548905},"usedName":{"valueName":{"identifier":"getRequestBodyType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5753369253307587304},"usedName":{"valueName":{"identifier":"newIORef"}},"qualification":null},{"reference":{"otherSlice":8774257832737088008},"usedName":{"valueName":{"identifier":"atomicModifyIORef"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S8"},{"reference":{"otherSlice":5035500197292437764},"usedName":{"valueName":{"identifier":"sinkRequestBody"}},"qualification":null},{"reference":{"otherSlice":7516753090012211395},"usedName":{"valueName":{"identifier":"lbsBackEnd"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"BS"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1156478319431720055},"usedName":{"typeName":{"identifier":"Param"}},"qualification":null},{"reference":{"otherSlice":6377169190689415136},"usedName":{"typeName":{"identifier":"File"}},"qualification":null},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"LBS"},{"reference":{"otherSlice":3173435256708193976},"usedName":{"valueName":{"identifier":"fileName"}},"qualification":null},{"reference":{"otherSlice":275482737402423134},"usedName":{"typeName":{"identifier":"Callback"}},"qualification":null},{"reference":{"otherSlice":8347118461982769886},"usedName":{"typeName":{"identifier":"Color"}},"qualification":null},{"reference":{"otherSlice":8780573258186764165},"usedName":{"typeName":{"identifier":"Middleware"}},"qualification":null}],"fragment":["detailedMiddleware' ::\n                    Callback ->\n                      (Color -> BS.ByteString -> [BS.ByteString]) ->\n                        (BS.ByteString -> [BS.ByteString]) ->\n                          (BS.ByteString -> BS.ByteString -> [BS.ByteString]) -> Middleware","detailedMiddleware' cb ansiColor ansiMethod ansiStatusCode app req\n  sendResponse\n  = do (req', body) <- case\n                         (requestBodyLength req, contentLength (requestHeaders req)) of\n                           (KnownLength len, _) | len <= 2048 -> getRequestBody req\n                           (_, Just len) | len <= 2048 -> getRequestBody req\n                           _ -> return (req, [])\n       let reqbodylog _\n             = if null body then [\"\"] else\n                 ansiColor White \"  Request Body: \" <> body <> [\"\\n\"]\n           reqbody\n             = concatMap (either (const [\"\"]) reqbodylog . decodeUtf8') body\n       postParams <- if requestMethod req `elem` [\"GET\", \"HEAD\"] then\n                       return [] else\n                       do postParams <- liftIO $ allPostParams body\n                          return $ collectPostParams postParams\n       let getParams = map emptyGetParam $ queryString req\n           accept = fromMaybe \"\" $ lookup H.hAccept $ requestHeaders req\n           params\n             = let par\n                     | not $ null postParams = [pack (show postParams)]\n                     | not $ null getParams = [pack (show getParams)]\n                     | otherwise = []\n                 in\n                 if null par then [\"\"] else\n                   ansiColor White \"  Params: \" <> par <> [\"\\n\"]\n       t0 <- getCurrentTime\n       app req' $\n         \\ rsp ->\n           do let isRaw\n                    = case rsp of\n                          ResponseRaw{} -> True\n                          _ -> False\n                  stCode = statusBS rsp\n                  stMsg = msgBS rsp\n              t1 <- getCurrentTime\n              cb $\n                mconcat $\n                  map toLogStr $\n                    ansiMethod (requestMethod req) ++\n                      [\" \", rawPathInfo req, \"\\n\"] ++\n                        params ++\n                          reqbody ++\n                            ansiColor White \"  Accept: \" ++\n                              [accept, \"\\n\"] ++\n                                if isRaw then [] else\n                                  ansiColor White \"  Status: \" ++\n                                    ansiStatusCode stCode (stCode <> \" \" <> stMsg) ++\n                                      [\" \", pack $ show $ diffUTCTime t1 t0, \"\\n\"]\n              sendResponse rsp\n  where allPostParams body\n          = case getRequestBodyType req of\n                Nothing -> return ([], [])\n                Just rbt -> do ichunks <- newIORef body\n                               let rbody\n                                     = atomicModifyIORef ichunks $\n                                         \\ chunks ->\n                                           case chunks of\n                                               [] -> ([], S8.empty)\n                                               x : y -> (y, x)\n                               sinkRequestBody lbsBackEnd rbt rbody\n        \n        emptyGetParam ::\n                      (BS.ByteString, Maybe BS.ByteString) ->\n                        (BS.ByteString, BS.ByteString)\n        emptyGetParam (k, Just v) = (k, v)\n        emptyGetParam (k, Nothing) = (k, \"\")\n        \n        collectPostParams :: ([Param], [File LBS.ByteString]) -> [Param]\n        collectPostParams (postParams, files)\n          = postParams ++ map (\\ (k, v) -> (k, \"FILE: \" <> fileName v)) files"],"instances":[],"language":{"extensions":["OverloadedStrings","RecordWildCards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}