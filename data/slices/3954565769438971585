{"sliceID":3954565769438971585,"uses":[{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"otherSlice":5151236523523606238},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"StrictPair"}},"qualification":null},{"reference":{"otherSlice":140230030014943349},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftR"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["fromDistinctDescList :: [(k, a)] -> Map k a","fromDistinctDescList [] = Tip\nfromDistinctDescList ((kx0, x0) : xs0)\n  = x0 `seq` go (1 :: Int) (Bin 1 kx0 x0 Tip Tip) xs0\n  where go !_ t [] = t\n        go s r ((kx, x) : xs)\n          = case create s xs of\n                (l :*: ys) -> x `seq`\n                                let !t' = link kx x l r in go (s `shiftL` 1) t' ys\n        create !_ [] = (Tip :*: [])\n        create s xs@(x' : xs')\n          | s == 1 =\n            case x' of\n                (kx, x) -> x `seq` (Bin 1 kx x Tip Tip :*: xs')\n          | otherwise =\n            case create (s `shiftR` 1) xs of\n                res@(_ :*: []) -> res\n                ((r :*: (ky, y)) : ys) -> case create (s `shiftR` 1) ys of\n                                              (l :*: zs) -> y `seq` (link ky y l r :*: zs)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}