{"sliceID":8002032973860080120,"uses":[{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"throw"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"constructorName":{"identifier":"DivideByZero"},"constructorTypeName":{"identifier":"ArithException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"numerator"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer.GMP.Internals"},"usedName":{"typeName":{"identifier":"Integer"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":1008626907939011545},"usedName":{"typeName":{"identifier":"Scientific"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"typeName":{"identifier":"Rational"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6810904563695528367},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":"M"},{"reference":{"otherSlice":1008626907939011545},"usedName":{"constructorName":{"identifier":"Scientific"},"constructorTypeName":{"identifier":"Scientific"}},"qualification":null},{"reference":{"otherSlice":5286553186981066813},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":"M"},{"reference":{"otherSlice":4599392948246788171},"usedName":{"valueName":{"identifier":"insert"}},"qualification":"M"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Integer"},"usedName":{"valueName":{"identifier":"quotRemInteger"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"%"}},"qualification":null},{"reference":{"otherSlice":3879183639758877525},"usedName":{"valueName":{"identifier":"magnitude"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"denominator"}},"qualification":null}],"fragment":["fromRationalRepetend ::\n                     Maybe Int ->\n                       Rational -> Either (Scientific, Rational) (Scientific, Maybe Int)","fromRationalRepetend mbLimit rational\n  | d == 0 = throw DivideByZero\n  | num < 0 =\n    case longDiv (-num) of\n        Left (s, r) -> Left (-s, -r)\n        Right (s, mb) -> Right (-s, mb)\n  | otherwise = longDiv num\n  where num = numerator rational\n        \n        longDiv ::\n                Integer -> Either (Scientific, Rational) (Scientific, Maybe Int)\n        longDiv n\n          = case mbLimit of\n                Nothing -> Right $ longDivNoLimit 0 0 M.empty n\n                Just l -> longDivWithLimit (-l) n\n        \n        longDivNoLimit ::\n                       Integer ->\n                         Int -> M.Map Integer Int -> (Integer -> (Scientific, Maybe Int))\n        longDivNoLimit !c !e _ns 0 = (Scientific c e, Nothing)\n        longDivNoLimit !c !e ns !n\n          | Just e' <- M.lookup n ns = (Scientific c e, Just (-e'))\n          | n < d =\n            let !ns' = M.insert n e ns in\n              longDivNoLimit (c * 10) (e - 1) ns' (n * 10)\n          | otherwise =\n            case n `quotRemInteger` d of\n                (# q, r #) -> longDivNoLimit (c + q) e ns r\n        \n        longDivWithLimit ::\n                         Int ->\n                           Integer -> Either (Scientific, Rational) (Scientific, Maybe Int)\n        longDivWithLimit l = go 0 0 M.empty\n          where go ::\n                   Integer ->\n                     Int ->\n                       M.Map Integer Int ->\n                         (Integer -> Either (Scientific, Rational) (Scientific, Maybe Int))\n                go !c !e _ns 0 = Right (Scientific c e, Nothing)\n                go !c !e ns !n\n                  | Just e' <- M.lookup n ns = Right (Scientific c e, Just (-e'))\n                  | e <= l = Left (Scientific c e, n % (d * magnitude (-e)))\n                  | n < d =\n                    let !ns' = M.insert n e ns in go (c * 10) (e - 1) ns' (n * 10)\n                  | otherwise =\n                    case n `quotRemInteger` d of\n                        (# q, r #) -> go (c + q) e ns r\n        d = denominator rational"],"instances":[],"language":{"extensions":["DeriveDataTypeable","BangPatterns","ScopedTypeVariables","UnboxedTuples","PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}