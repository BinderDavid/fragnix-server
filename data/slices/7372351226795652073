{"sliceID":7372351226795652073,"uses":[{"reference":{"otherSlice":8122526006167035783},"usedName":{"typeName":{"identifier":"NFData"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":8122526006167035783},"usedName":{"valueName":{"identifier":"rnf"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Array"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"String"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Number"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Bool"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Null"},"constructorTypeName":{"identifier":"Value"}},"qualification":null}],"fragment":["instance NFData Value where\n        rnf (Object o) = rnf o\n        rnf (Array a) = foldl' (\\ x y -> rnf y `seq` x) () a\n        rnf (String s) = rnf s\n        rnf (Number n) = rnf n\n        rnf (Bool b) = rnf b\n        rnf Null = ()"],"instances":[],"language":{"extensions":["DeriveDataTypeable","GeneralizedNewtypeDeriving","Rank2Types","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"]}}