{"sliceID":2570384723803438089,"uses":[{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"One"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"constructorName":{"identifier":"Node3"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"constructorName":{"identifier":"Node2"},"constructorTypeName":{"identifier":"Node"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Two"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Three"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"constructorName":{"identifier":"Four"},"constructorTypeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":492216043322585822},"usedName":{"typeName":{"identifier":"Digit"}},"qualification":null},{"reference":{"otherSlice":5928074826083234112},"usedName":{"typeName":{"identifier":"Node"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null}],"fragment":["delRebuildLeftDigit ::\n                      Sized a => Int -> Digit (Node a) -> a -> FingerTree (Node a)","delRebuildLeftDigit s (One a) p\n  = let !sp = size p in\n      case a of\n          Node3 sxyz x y z -> Deep s (One (Node2 (sxyz - sz) x y)) EmptyT\n                                (One (Node2 (sz + sp) z p))\n            where !sz = size z\n          Node2 sxy x y -> Single (Node3 (sxy + sp) x y p)\ndelRebuildLeftDigit s (Two a b) p\n  = let !sp = size p in\n      case b of\n          Node3 sxyz x y z -> Deep s (Two a (Node2 (sxyz - sz) x y)) EmptyT\n                                (One (Node2 (sz + sp) z p))\n            where !sz = size z\n          Node2 sxy x y -> Deep s (One a) EmptyT\n                             (One (Node3 (sxy + sp) x y p))\ndelRebuildLeftDigit s (Three a b c) p\n  = let !sp = size p in\n      case c of\n          Node3 sxyz x y z -> Deep s (Two a b) EmptyT\n                                (Two (Node2 (sxyz - sz) x y) (Node2 (sz + sp) z p))\n            where !sz = size z\n          Node2 sxy x y -> Deep s (Two a b) EmptyT\n                             (One (Node3 (sxy + sp) x y p))\ndelRebuildLeftDigit s (Four a b c d) p\n  = let !sp = size p in\n      case d of\n          Node3 sxyz x y z -> Deep s (Three a b c) EmptyT\n                                (Two (Node2 (sxyz - sz) x y) (Node2 (sz + sp) z p))\n            where !sz = size z\n          Node2 sxy x y -> Deep s (Two a b) EmptyT\n                             (Two c (Node3 (sxy + sp) x y p))"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}