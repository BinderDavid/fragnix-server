{"sliceID":1086788748254582814,"uses":[{"reference":{"otherSlice":1697727713302452574},"usedName":{"valueName":{"identifier":"isHTTP2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2455091088557061440},"usedName":{"valueName":{"identifier":"connRecv"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":404915850270007730},"usedName":{"valueName":{"identifier":"isPrefixOf"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsHTTP2Enabled"}},"qualification":null},{"reference":{"otherSlice":2781444455185641184},"usedName":{"valueName":{"identifier":"makeReceiveN"}},"qualification":null},{"reference":{"otherSlice":2455091088557061440},"usedName":{"valueName":{"identifier":"connRecvBuf"}},"qualification":null},{"reference":{"otherSlice":8444244137189822489},"usedName":{"valueName":{"identifier":"http2"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"newIORef"}},"qualification":null},{"reference":{"otherSlice":8319270568586291478},"usedName":{"valueName":{"identifier":"mkSource"}},"qualification":null},{"reference":{"otherSlice":3222900445941598211},"usedName":{"valueName":{"identifier":"wrappedRecv"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsSlowlorisSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"writeIORef"}},"qualification":null},{"reference":{"otherSlice":4018775593934308134},"usedName":{"valueName":{"identifier":"leftoverSource"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"typeName":{"identifier":"SomeException"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsProxyProtocol"}},"qualification":null},{"reference":{"otherSlice":4050474006610462449},"usedName":{"constructorName":{"identifier":"ProxyProtocolNone"},"constructorTypeName":{"identifier":"ProxyProtocol"}},"qualification":null},{"reference":{"otherSlice":4050474006610462449},"usedName":{"constructorName":{"identifier":"ProxyProtocolRequired"},"constructorTypeName":{"identifier":"ProxyProtocol"}},"qualification":null},{"reference":{"otherSlice":3073900091224728213},"usedName":{"valueName":{"identifier":"readSource"}},"qualification":null},{"reference":{"otherSlice":4050474006610462449},"usedName":{"constructorName":{"identifier":"ProxyProtocolOptional"},"constructorTypeName":{"identifier":"ProxyProtocol"}},"qualification":null},{"reference":{"otherSlice":8530159555426240241},"usedName":{"valueName":{"identifier":"break"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2374795821211994760},"usedName":{"valueName":{"identifier":"split"}},"qualification":"S"},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"reads"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2694158817781932873},"usedName":{"constructorName":{"identifier":"SockAddrInet"},"constructorTypeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":3175645509571572385},"usedName":{"valueName":{"identifier":"readInt"}},"qualification":null},{"reference":{"otherSlice":5219340388914881234},"usedName":{"valueName":{"identifier":"toHostAddress"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2694158817781932873},"usedName":{"constructorName":{"identifier":"SockAddrInet6"},"constructorTypeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":3816182931499089889},"usedName":{"valueName":{"identifier":"toHostAddress6"}},"qualification":null},{"reference":{"otherSlice":6720186289841898006},"usedName":{"constructorName":{"identifier":"BadProxyHeader"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Char"},"usedName":{"valueName":{"identifier":"chr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"fromEnum"}},"qualification":null},{"reference":{"otherSlice":7117247317273422005},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"S"},{"reference":{"otherSlice":7817015988103101053},"usedName":{"valueName":{"identifier":"threadHandle1"}},"qualification":null},{"reference":{"otherSlice":6720186289841898006},"usedName":{"constructorName":{"identifier":"ConnectionClosedByPeer"},"constructorTypeName":{"identifier":"InvalidRequest"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"fromException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"readIORef"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3186964978747758913},"usedName":{"valueName":{"identifier":"toInternalInfo"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"otherSlice":5130499542803926929},"usedName":{"valueName":{"identifier":"sendResponse"}},"qualification":null},{"reference":{"otherSlice":8108559793927117712},"usedName":{"valueName":{"identifier":"defaultIndexRequestHeader"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"otherSlice":3163996071044392281},"usedName":{"valueName":{"identifier":"defaultRequest"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"remoteHost"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsOnExceptionResponse"}},"qualification":null},{"reference":{"otherSlice":3031025638083640169},"usedName":{"valueName":{"identifier":"recvRequest"}},"qualification":null},{"reference":{"otherSlice":2150836866812832620},"usedName":{"valueName":{"identifier":"isSecure"}},"qualification":null},{"reference":{"otherSlice":8436770666560323829},"usedName":{"valueName":{"identifier":"isTransportSecure"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsOnException"}},"qualification":null},{"reference":{"otherSlice":1542660446117195073},"usedName":{"constructorName":{"identifier":"NoKeepAliveRequest"},"constructorTypeName":{"identifier":"NoKeepAliveRequest"}},"qualification":null},{"reference":{"otherSlice":6043783101314232459},"usedName":{"valueName":{"identifier":"pause"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":4900873264252530777},"usedName":{"valueName":{"identifier":"resume"}},"qualification":"T"},{"reference":{"otherSlice":1101192067246769824},"usedName":{"constructorName":{"identifier":"ResponseReceived"},"constructorTypeName":{"identifier":"ResponseReceived"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"yield"}},"qualification":"Conc"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsMaximumBodyFlush"}},"qualification":null},{"reference":{"otherSlice":4454721318340456240},"usedName":{"valueName":{"identifier":"flushEntireBody"}},"qualification":null},{"reference":{"otherSlice":5190696536642941726},"usedName":{"valueName":{"identifier":"flushBody"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":2455091088557061440},"usedName":{"typeName":{"identifier":"Connection"}},"qualification":null},{"reference":{"otherSlice":7131233874288028310},"usedName":{"typeName":{"identifier":"InternalInfo1"}},"qualification":null},{"reference":{"otherSlice":2694158817781932873},"usedName":{"typeName":{"identifier":"SockAddr"}},"qualification":null},{"reference":{"otherSlice":7537180873733986230},"usedName":{"typeName":{"identifier":"Transport"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":null},{"reference":{"otherSlice":628686228066488211},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["serveConnection ::\n                Connection ->\n                  InternalInfo1 ->\n                    SockAddr -> Transport -> Settings -> Application -> IO ()","serveConnection conn ii1 origAddr transport settings app\n  = do (h2, bs) <- if isHTTP2 transport then return (True, \"\") else\n                     do bs0 <- connRecv conn\n                        if S.length bs0 >= 4 && \"PRI \" `S.isPrefixOf` bs0 then\n                          return (True, bs0) else return (False, bs0)\n       if settingsHTTP2Enabled settings && h2 then\n         do recvN <- makeReceiveN bs (connRecv conn) (connRecvBuf conn)\n            http2 conn ii1 origAddr transport settings recvN app\n         else\n         do istatus <- newIORef False\n            src <- mkSource\n                     (wrappedRecv conn th istatus (settingsSlowlorisSize settings))\n            writeIORef istatus True\n            leftoverSource src bs\n            addr <- getProxyProtocolAddr src\n            http1 True addr istatus src `E.catch`\n              \\ e ->\n                do sendErrorResponse addr istatus e\n                   throwIO (e :: SomeException)\n  where getProxyProtocolAddr src\n          = case settingsProxyProtocol settings of\n                ProxyProtocolNone -> return origAddr\n                ProxyProtocolRequired -> do seg <- readSource src\n                                            parseProxyProtocolHeader src seg\n                ProxyProtocolOptional -> do seg <- readSource src\n                                            if S.isPrefixOf \"PROXY \" seg then\n                                              parseProxyProtocolHeader src seg else\n                                              do leftoverSource src seg\n                                                 return origAddr\n        parseProxyProtocolHeader src seg\n          = do let (header, seg') = S.break (== 13) seg\n                   maybeAddr\n                     = case S.split 32 header of\n                           [\"PROXY\", \"TCP4\", clientAddr, _, clientPort, _] -> case\n                                                                                [x |\n                                                                                 (x, t) <- reads\n                                                                                             (decodeAscii\n                                                                                                clientAddr),\n                                                                                 null t]\n                                                                                of\n                                                                                  [a] -> Just\n                                                                                           (SockAddrInet\n                                                                                              (readInt\n                                                                                                 clientPort)\n                                                                                              (toHostAddress\n                                                                                                 a))\n                                                                                  _ -> Nothing\n                           [\"PROXY\", \"TCP6\", clientAddr, _, clientPort, _] -> case\n                                                                                [x |\n                                                                                 (x, t) <- reads\n                                                                                             (decodeAscii\n                                                                                                clientAddr),\n                                                                                 null t]\n                                                                                of\n                                                                                  [a] -> Just\n                                                                                           (SockAddrInet6\n                                                                                              (readInt\n                                                                                                 clientPort)\n                                                                                              0\n                                                                                              (toHostAddress6\n                                                                                                 a)\n                                                                                              0)\n                                                                                  _ -> Nothing\n                           (\"PROXY\" : (\"UNKNOWN\" : _)) -> Just origAddr\n                           _ -> Nothing\n               case maybeAddr of\n                   Nothing -> throwIO (BadProxyHeader (decodeAscii header))\n                   Just a -> do leftoverSource src (S.drop 2 seg')\n                                return a\n        decodeAscii = map (chr . fromEnum) . S.unpack\n        th = threadHandle1 ii1\n        shouldSendErrorResponse se\n          | Just ConnectionClosedByPeer <- fromException se = False\n          | otherwise = True\n        sendErrorResponse addr istatus e\n          = do status <- readIORef istatus\n               when (shouldSendErrorResponse e && status) $\n                 do let ii = toInternalInfo ii1 0\n                        dreq = dummyreq addr\n                    void $\n                      sendResponse settings conn ii dreq defaultIndexRequestHeader\n                        (return S.empty)\n                        (errorResponse e)\n        dummyreq addr = defaultRequest{remoteHost = addr}\n        errorResponse e = settingsOnExceptionResponse settings e\n        http1 firstRequest addr istatus src\n          = do (req', mremainingRef, idxhdr, nextBodyFlush,\n                ii) <- recvRequest firstRequest settings conn ii1 addr src\n               let req = req'{isSecure = isTransportSecure transport}\n               keepAlive <- processRequest istatus src req mremainingRef idxhdr\n                              nextBodyFlush\n                              ii\n                              `E.catch`\n                              \\ e ->\n                                do sendErrorResponse addr istatus e\n                                   settingsOnException settings (Just req) e\n                                   return False\n               when keepAlive $\n                 http1 False addr istatus src `E.catch`\n                   \\ NoKeepAliveRequest -> return ()\n        processRequest istatus src req mremainingRef idxhdr nextBodyFlush\n          ii\n          = do T.pause th\n               keepAliveRef <- newIORef $ error \"keepAliveRef not filled\"\n               _ <- app req $\n                      \\ res ->\n                        do T.resume th\n                           writeIORef istatus False\n                           keepAlive <- sendResponse settings conn ii req idxhdr\n                                          (readSource src)\n                                          res\n                           writeIORef keepAliveRef keepAlive\n                           return ResponseReceived\n               keepAlive <- readIORef keepAliveRef\n               Conc.yield\n               if not keepAlive then return False else\n                 case settingsMaximumBodyFlush settings of\n                     Nothing -> do flushEntireBody nextBodyFlush\n                                   T.resume th\n                                   return True\n                     Just maxToRead -> do let tryKeepAlive\n                                                = do isComplete <- flushBody nextBodyFlush maxToRead\n                                                     if isComplete then\n                                                       do T.resume th\n                                                          return True\n                                                       else return False\n                                          case mremainingRef of\n                                              Just ref -> do remaining <- readIORef ref\n                                                             if remaining <= maxToRead then\n                                                               tryKeepAlive else return False\n                                              Nothing -> tryKeepAlive"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","PackageImports","PatternGuards","ScopedTypeVariables","TupleSections","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}