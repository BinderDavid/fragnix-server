{"sliceID":6660220962865897400,"uses":[{"reference":{"otherSlice":5910351323162998931},"usedName":{"valueName":{"identifier":"peekChar'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"identifier":"void"}},"qualification":null},{"reference":{"otherSlice":1475569709675169914},"usedName":{"valueName":{"identifier":"anyChar"}},"qualification":null},{"reference":{"otherSlice":1282283649955272306},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4729247981504330318},"usedName":{"valueName":{"identifier":"twoDigits"}},"qualification":null},{"reference":{"otherSlice":3568513668788864857},"usedName":{"valueName":{"identifier":"peekChar"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"identifier":"negate"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":5496586007665375122},"usedName":{"valueName":{"identifier":"minutesToTimeZone"}},"qualification":"Local"},{"reference":{"otherSlice":1770770862601050229},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":6331514456510255766},"usedName":{"typeName":{"identifier":"TimeZone"}},"qualification":"Local"}],"fragment":["timeZone :: Parser (Maybe Local.TimeZone)","timeZone\n  = do let maybeSkip c\n             = do ch <- peekChar'\n                  when (ch == c) (void anyChar)\n       maybeSkip ' '\n       ch <- satisfy $ \\ c -> c == 'Z' || c == '+' || c == '-'\n       if ch == 'Z' then return Nothing else\n         do h <- twoDigits\n            mm <- peekChar\n            m <- case mm of\n                     Just ':' -> anyChar *> twoDigits\n                     Just d | isDigit d -> twoDigits\n                     _ -> return 0\n            let off\n                  | ch == '-' = negate off0\n                  | otherwise = off0\n                off0 = h * 60 + m\n            case undefined of\n                _ | off == 0 -> return Nothing\n                  | off < (-720) || off > 840 || m > 59 ->\n                    fail \"invalid time zone offset\"\n                  | otherwise ->\n                    let !tz = Local.minutesToTimeZone off in return (Just tz)"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}