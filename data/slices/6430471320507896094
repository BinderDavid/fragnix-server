{"sliceID":6430471320507896094,"uses":[{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":5817155485589370063},"usedName":{"typeName":{"identifier":"Array"}},"qualification":null},{"reference":{"otherSlice":7808444151530224948},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":5661105965881527651},"usedName":{"valueName":{"identifier":"run"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7775656487906570083},"usedName":{"valueName":{"identifier":"new_"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":901173974320700536},"usedName":{"valueName":{"identifier":"copyM"}},"qualification":null},{"reference":{"otherSlice":410507955169915919},"usedName":{"valueName":{"identifier":"write"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2374614385050159493},"usedName":{"valueName":{"identifier":"index"}},"qualification":null}],"fragment":["filter :: (a -> Bool) -> Array a -> Array a","filter p\n  = \\ ary ->\n      let !n = length ary in\n        run $\n          do mary <- new_ n\n             go ary mary 0 0 n\n  where go ary mary i j n\n          | i >= n =\n            if i == j then return mary else\n              do mary2 <- new_ j\n                 copyM mary 0 mary2 0 j\n                 return mary2\n          | p el = write mary j el >> go ary mary (i + 1) (j + 1) n\n          | otherwise = go ary mary (i + 1) j n\n          where el = index ary i"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","Rank2Types","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}