{"sliceID":2596396061686219500,"uses":[{"reference":{"otherSlice":264248234492131928},"usedName":{"valueName":{"identifier":"accum_stream"}},"qualification":null},{"reference":{"otherSlice":6146303340648410203},"usedName":{"valueName":{"identifier":"zipWith"}},"qualification":"Bundle"},{"reference":{"otherSlice":2322077952989357605},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"otherSlice":1710731503429193408},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["accumulate_ ::\n              (Vector v a, Vector v Int, Vector v b) =>\n              (a -> b -> a) -> v a -> v Int -> v b -> v a","accumulate_ f v is xs\n  = accum_stream f v (Bundle.zipWith (,) (stream is) (stream xs))"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}