{"sliceID":5171630907937111994,"uses":[{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6509030782522232253},"usedName":{"valueName":{"identifier":"keepAlive"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"otherSlice":5852089015320237987},"usedName":{"valueName":{"identifier":"zBufError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":1496483534253480681},"usedName":{"constructorName":{"identifier":"PRError"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":null},{"reference":{"otherSlice":1293333286748726353},"usedName":{"constructorName":{"identifier":"ZlibException"},"constructorTypeName":{"identifier":"ZlibException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":6799021349584292381},"usedName":{"valueName":{"identifier":"c_get_avail_out"}},"qualification":null},{"reference":{"otherSlice":7477884691346391193},"usedName":{"valueName":{"identifier":"defaultChunkSize"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":421812447266527560},"usedName":{"valueName":{"identifier":"packCStringLen"}},"qualification":"S"},{"reference":{"otherSlice":1176353583310377206},"usedName":{"valueName":{"identifier":"c_set_avail_out"}},"qualification":null},{"reference":{"otherSlice":1496483534253480681},"usedName":{"constructorName":{"identifier":"PRNext"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":null},{"reference":{"otherSlice":1496483534253480681},"usedName":{"constructorName":{"identifier":"PRDone"},"constructorTypeName":{"identifier":"PopperRes"}},"qualification":null},{"reference":{"builtinModule":"GHC.ForeignPtr"},"usedName":{"typeName":{"identifier":"ForeignPtr"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CChar"}},"qualification":null},{"reference":{"otherSlice":3142316566516262198},"usedName":{"typeName":{"identifier":"ZStreamStruct"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":836319173877103142},"usedName":{"typeName":{"identifier":"ZStream'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.Types"},"usedName":{"typeName":{"identifier":"CInt"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3240663209338734866},"usedName":{"typeName":{"identifier":"Popper"}},"qualification":null}],"fragment":["drain ::\n      ForeignPtr CChar ->\n        ForeignPtr ZStreamStruct ->\n          Maybe S.ByteString -> (ZStream' -> IO CInt) -> Bool -> Popper","drain fbuff fzstr mbs func isFinish\n  = withForeignPtr fzstr $\n      \\ zstr ->\n        keepAlive mbs $\n          do res <- func zstr\n             if res < 0 && res /= zBufError then\n               return $ PRError $ ZlibException $ fromIntegral res else\n               do avail <- c_get_avail_out zstr\n                  let size = defaultChunkSize - fromIntegral avail\n                      toOutput = avail == 0 || (isFinish && size /= 0)\n                  if toOutput then\n                    withForeignPtr fbuff $\n                      \\ buff ->\n                        do bs <- S.packCStringLen (buff, size)\n                           c_set_avail_out zstr buff $ fromIntegral defaultChunkSize\n                           return $ PRNext bs\n                    else return PRDone"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}