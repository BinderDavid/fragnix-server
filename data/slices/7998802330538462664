{"sliceID":7998802330538462664,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"repeat"}},"qualification":null},{"reference":{"otherSlice":5414550357964476688},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":1217799320961605858},"usedName":{"valueName":{"identifier":"lazyBreaker"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":8680191706454834021},"usedName":{"valueName":{"identifier":"lsplit"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["splitKeepFront :: S.ByteString -> L.ByteString -> [L.ByteString]","splitKeepFront pat | S.null pat = const (repeat L.empty)\nsplitKeepFront pat = map L.fromChunks . splitter . L.toChunks\n  where !patLen = S.length pat\n        breaker = lazyBreaker True pat\n        splitter strs\n          = case splitter' strs of\n                ([] : rst) -> rst\n                other -> other\n        splitter' [] = []\n        splitter' strs\n          = case breaker strs of\n                (pre, mtch) -> pre :\n                                 case mtch of\n                                     [] -> []\n                                     _ -> case lsplit patLen mtch of\n                                              (pt, rst) -> if null rst then [pt] else\n                                                             let (h : t) = splitter' rst in\n                                                               (pt ++ h) : t"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}