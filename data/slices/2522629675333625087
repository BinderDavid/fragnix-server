{"sliceID":2522629675333625087,"uses":[{"reference":{"otherSlice":7565183779444256373},"usedName":{"constructorName":{"identifier":"Chunk"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2549460081380536392},"usedName":{"valueName":{"identifier":"indicesOne"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"constructorName":{"identifier":"Text"},"constructorTypeName":{"identifier":"Text"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"constructorName":{"identifier":"Empty"},"constructorTypeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"/="}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4363146263699965937},"usedName":{"valueName":{"identifier":"index"}},"qualification":null},{"reference":{"otherSlice":9084323438617890729},"usedName":{"valueName":{"identifier":"wordLength"}},"qualification":null},{"reference":{"otherSlice":8249802865258819777},"usedName":{"valueName":{"identifier":"foldlChunks"}},"qualification":null},{"reference":{"otherSlice":5592162421050260132},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word64"}},"qualification":null},{"reference":{"otherSlice":6349595094191047219},"usedName":{"constructorName":{"operator":":*:"},"constructorTypeName":{"identifier":"PairS"}},"qualification":null},{"reference":{"otherSlice":5928679534711299048},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Int"},"usedName":{"typeName":{"identifier":"Int64"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".|."}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["indices :: Text -> Text -> [Int64]","indices needle@(Chunk n ns) _haystack@(Chunk k ks)\n  | nlen <= 0 = []\n  | nlen == 1 = indicesOne (nindex 0) 0 k ks\n  | otherwise = advance k ks 0 0\n  where advance x@(T.Text _ _ l) xs = scan\n          where scan !g !i\n                  | i >= m =\n                    case xs of\n                        Empty -> []\n                        Chunk y ys -> advance y ys g (i - m)\n                  | lackingHay (i + nlen) x xs = []\n                  | c == z && candidateMatch 0 = g : scan (g + nlen) (i + nlen)\n                  | otherwise = scan (g + delta) (i + delta)\n                  where m = fromIntegral l\n                        c = hindex (i + nlast)\n                        delta\n                          | nextInPattern = nlen + 1\n                          | c == z = skip + 1\n                          | otherwise = 1\n                        nextInPattern = mask .&. swizzle (hindex (i + nlen)) == 0\n                        candidateMatch !j\n                          | j >= nlast = True\n                          | hindex (i + j) /= nindex j = False\n                          | otherwise = candidateMatch (j + 1)\n                        hindex = index x xs\n        nlen = wordLength needle\n        nlast = nlen - 1\n        nindex = index n ns\n        z = foldlChunks fin 0 needle\n          where fin _ (T.Text farr foff flen)\n                  = A.unsafeIndex farr (foff + flen - 1)\n        (mask :: Word64) :*: skip = buildTable n ns 0 0 0 (nlen - 2)\n        swizzle w = 1 `shiftL` (fromIntegral w .&. 63)\n        buildTable (T.Text xarr xoff xlen) xs = go\n          where go !(g :: Int64) !i !msk !skp\n                  | i >= xlast =\n                    case xs of\n                        Empty -> (msk .|. swizzle z) :*: skp\n                        Chunk y ys -> buildTable y ys g 0 msk' skp'\n                  | otherwise = go (g + 1) (i + 1) msk' skp'\n                  where c = A.unsafeIndex xarr (xoff + i)\n                        msk' = msk .|. swizzle c\n                        skp'\n                          | c == z = nlen - g - 2\n                          | otherwise = skp\n                        xlast = xlen - 1\n        lackingHay q = go 0\n          where go p (T.Text _ _ l) ps\n                  = p' < q &&\n                      case ps of\n                          Empty -> True\n                          Chunk r rs -> go p' r rs\n                  where p' = p + fromIntegral l\nindices _ _ = []"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}