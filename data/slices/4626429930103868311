{"sliceID":4626429930103868311,"uses":[{"reference":{"builtinModule":"GHC.Prim"},"usedName":{"valueName":{"identifier":"seq"}},"qualification":null},{"reference":{"otherSlice":3879614191216197644},"usedName":{"valueName":{"identifier":"unfoldr"}},"qualification":"Bundle"},{"reference":{"otherSlice":6689203807505569506},"usedName":{"valueName":{"identifier":"sized"}},"qualification":"Bundle"},{"reference":{"otherSlice":6110420032456596170},"usedName":{"constructorName":{"identifier":"Exact"},"constructorTypeName":{"identifier":"Size"}},"qualification":null},{"reference":{"otherSlice":8794285454331865178},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":1710731503429193408},"usedName":{"valueName":{"identifier":"basicUnsafeIndexM"}},"qualification":null},{"reference":{"otherSlice":4112159146576358587},"usedName":{"constructorName":{"identifier":"Box"},"constructorTypeName":{"identifier":"Box"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1710731503429193408},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null},{"reference":{"otherSlice":2256778640200800668},"usedName":{"typeName":{"identifier":"Bundle"}},"qualification":null}],"fragment":["streamR :: Vector v a => v a -> Bundle u a","streamR v\n  = v `seq` n `seq` (Bundle.unfoldr get n `Bundle.sized` Exact n)\n  where n = length v\n        \n        {-# INLINE get #-}\n        get 0 = Nothing\n        get i\n          = let i' = i - 1 in\n              case basicUnsafeIndexM v i' of\n                  Box x -> Just (x, i')"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}