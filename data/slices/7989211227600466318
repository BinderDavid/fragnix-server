{"sliceID":7989211227600466318,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":5414550357964476688},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":7238205090002904961},"usedName":{"valueName":{"identifier":"lazyBreak"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":8680191706454834021},"usedName":{"valueName":{"identifier":"lsplit"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null}],"fragment":["breakFindAfterL ::\n                S.ByteString ->\n                  L.ByteString -> ((L.ByteString, L.ByteString), Bool)","breakFindAfterL pat | S.null pat = \\ str -> ((L.empty, str), True)\nbreakFindAfterL pat = breaker' . L.toChunks\n  where !patLen = S.length pat\n        breaker = lazyBreak pat\n        breaker' strs\n          = let (pre, mtch) = breaker strs\n                (pl, a) = if null mtch then ([], []) else lsplit patLen mtch\n              in ((L.fromChunks (pre ++ pl), L.fromChunks a), not (null mtch))"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}