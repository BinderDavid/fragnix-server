{"sliceID":4493346144973792439,"uses":[{"reference":{"otherSlice":751284367628750892},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":"G"},{"reference":{"otherSlice":7677382095543350169},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicLength"}},"qualification":"G"},{"reference":{"otherSlice":7677382095543350169},"usedName":{"constructorName":{"identifier":"MVector"},"constructorTypeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeSlice"}},"qualification":"G"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicOverlaps"}},"qualification":"G"},{"reference":{"otherSlice":7410168220154661723},"usedName":{"valueName":{"identifier":"sameMutableArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeNew"}},"qualification":"G"},{"reference":{"otherSlice":1240416926497088270},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":null},{"reference":{"otherSlice":2440164120304872508},"usedName":{"valueName":{"identifier":"uninitialised"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicInitialize"}},"qualification":"G"},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeReplicate"}},"qualification":"G"},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeRead"}},"qualification":"G"},{"reference":{"otherSlice":5575741799243539711},"usedName":{"valueName":{"identifier":"readArray"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeWrite"}},"qualification":"G"},{"reference":{"otherSlice":1080947357764179124},"usedName":{"valueName":{"identifier":"writeArray"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeCopy"}},"qualification":"G"},{"reference":{"otherSlice":6087922025615262747},"usedName":{"valueName":{"identifier":"copyMutableArray"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicUnsafeMove"}},"qualification":"G"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null},{"reference":{"otherSlice":7834020428702354242},"usedName":{"valueName":{"identifier":"overlaps"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"compare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"LT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"otherSlice":1093281831608341007},"usedName":{"valueName":{"identifier":"moveBackwards"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"EQ"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"GT"},"constructorTypeName":{"identifier":"Ordering"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":5682776614906357272},"usedName":{"valueName":{"identifier":"moveForwardsLargeOverlap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":2198137567336520559},"usedName":{"valueName":{"identifier":"moveForwardsSmallOverlap"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"valueName":{"identifier":"basicClear"}},"qualification":"G"},{"reference":{"otherSlice":3772340468661706852},"usedName":{"valueName":{"identifier":"set"}},"qualification":"G"}],"fragment":["instance G.MVector MVector a where\n        {-# INLINE basicLength #-}\n        basicLength (MVector _ n _) = n\n        \n        {-# INLINE basicUnsafeSlice #-}\n        basicUnsafeSlice j m (MVector i _ arr) = MVector (i + j) m arr\n        \n        {-# INLINE basicOverlaps #-}\n        basicOverlaps (MVector i m arr1) (MVector j n arr2)\n          = sameMutableArray arr1 arr2 &&\n              (between i j (j + n) || between j i (i + m))\n          where between x y z = x >= y && x < z\n        \n        {-# INLINE basicUnsafeNew #-}\n        basicUnsafeNew n\n          = do arr <- newArray n uninitialised\n               return (MVector 0 n arr)\n        \n        {-# INLINE basicInitialize #-}\n        basicInitialize _ = return ()\n        \n        {-# INLINE basicUnsafeReplicate #-}\n        basicUnsafeReplicate n x\n          = do arr <- newArray n x\n               return (MVector 0 n arr)\n        \n        {-# INLINE basicUnsafeRead #-}\n        basicUnsafeRead (MVector i _ arr) j = readArray arr (i + j)\n        \n        {-# INLINE basicUnsafeWrite #-}\n        basicUnsafeWrite (MVector i _ arr) j x = writeArray arr (i + j) x\n        \n        {-# INLINE basicUnsafeCopy #-}\n        basicUnsafeCopy (MVector i n dst) (MVector j _ src)\n          = copyMutableArray dst i src j n\n        basicUnsafeMove dst@(MVector iDst n arrDst)\n          src@(MVector iSrc _ arrSrc)\n          = case n of\n                0 -> return ()\n                1 -> readArray arrSrc iSrc >>= writeArray arrDst iDst\n                2 -> do x <- readArray arrSrc iSrc\n                        y <- readArray arrSrc (iSrc + 1)\n                        writeArray arrDst iDst x\n                        writeArray arrDst (iDst + 1) y\n                _ | overlaps dst src ->\n                    case compare iDst iSrc of\n                        LT -> moveBackwards arrDst iDst iSrc n\n                        EQ -> return ()\n                        GT | (iDst - iSrc) * 2 < n ->\n                             moveForwardsLargeOverlap arrDst iDst iSrc n\n                           | otherwise -> moveForwardsSmallOverlap arrDst iDst iSrc n\n                  | otherwise -> G.basicUnsafeCopy dst src\n        \n        {-# INLINE basicClear #-}\n        basicClear v = G.set v uninitialised"],"instances":[],"language":{"extensions":["DeriveDataTypeable","MultiParamTypeClasses","FlexibleInstances","BangPatterns","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}