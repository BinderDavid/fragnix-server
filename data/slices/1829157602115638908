{"sliceID":1829157602115638908,"uses":[{"reference":{"otherSlice":1880869766440590388},"usedName":{"valueName":{"identifier":"zipWith'"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"min"}},"qualification":null},{"reference":{"otherSlice":4612766933172929877},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"otherSlice":2227121330924139218},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"otherSlice":1105906692949335211},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null}],"fragment":["zipWith :: (a -> b -> c) -> Seq a -> Seq b -> Seq c","zipWith f s1 s2 = zipWith' f s1' s2'\n  where minLen = min (length s1) (length s2)\n        s1' = take minLen s1\n        s2' = take minLen s2"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}