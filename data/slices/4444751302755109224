{"sliceID":4444751302755109224,"uses":[{"reference":{"otherSlice":4255773995153485309},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":8107163177077041873},"usedName":{"valueName":{"identifier":"digitToTree"}},"qualification":null},{"reference":{"otherSlice":7811094507749523250},"usedName":{"valueName":{"identifier":"initsDigit"}},"qualification":null},{"reference":{"otherSlice":4035425512200636628},"usedName":{"valueName":{"identifier":"deep"}},"qualification":null},{"reference":{"otherSlice":1701672063676429377},"usedName":{"constructorName":{"identifier":"SnocRTree"},"constructorTypeName":{"identifier":"ViewRTree"}},"qualification":null},{"reference":{"otherSlice":9034244731772916494},"usedName":{"valueName":{"identifier":"viewRTree"}},"qualification":null},{"reference":{"otherSlice":7187818823331847885},"usedName":{"valueName":{"identifier":"initsNode"}},"qualification":null}],"fragment":["initsTree ::\n            Sized a => (FingerTree a -> b) -> FingerTree a -> FingerTree b","initsTree _ EmptyT = EmptyT\ninitsTree f (Single x) = Single (f (Single x))\ninitsTree f (Deep n pr m sf)\n  = Deep n (fmap (f . digitToTree) (initsDigit pr)) (initsTree f' m)\n      (fmap (f . deep pr m) (initsDigit sf))\n  where f' ms\n          = let SnocRTree m' node = viewRTree ms in\n              fmap (\\ sf' -> f (deep pr m' sf')) (initsNode node)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}