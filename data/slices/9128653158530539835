{"sliceID":9128653158530539835,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":5759800823442734894},"usedName":{"valueName":{"identifier":"graphFromEdges"}},"qualification":null},{"reference":{"otherSlice":4755739410015461690},"usedName":{"valueName":{"identifier":"scc"}},"qualification":null},{"reference":{"otherSlice":8609837841181870823},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"otherSlice":1956009612165114492},"usedName":{"constructorName":{"identifier":"CyclicSCC"},"constructorTypeName":{"identifier":"SCC"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1956009612165114492},"usedName":{"constructorName":{"identifier":"AcyclicSCC"},"constructorTypeName":{"identifier":"SCC"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"foldr"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"elem"}},"qualification":null},{"reference":{"builtinModule":"GHC.Arr"},"usedName":{"valueName":{"operator":"!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":1956009612165114492},"usedName":{"typeName":{"identifier":"SCC"}},"qualification":null}],"fragment":["stronglyConnCompR ::\n                    Ord key => [(node, key, [key])] -> [SCC (node, key, [key])]","stronglyConnCompR [] = []\nstronglyConnCompR edges0 = map decode forest\n  where (graph, vertex_fn, _) = graphFromEdges edges0\n        forest = scc graph\n        decode (Node v [])\n          | mentions_itself v = CyclicSCC [vertex_fn v]\n          | otherwise = AcyclicSCC (vertex_fn v)\n        decode other = CyclicSCC (dec other [])\n          where dec (Node v ts) vs = vertex_fn v : foldr dec vs ts\n        mentions_itself v = v `elem` (graph ! v)"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","DeriveGeneric","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}