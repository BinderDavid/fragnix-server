{"sliceID":2896138221575441948,"uses":[{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"newArray"}},"qualification":"IOA"},{"reference":{"otherSlice":9193538520303254692},"usedName":{"valueName":{"identifier":"minTokenIx"}},"qualification":null},{"reference":{"otherSlice":4080549483470999987},"usedName":{"valueName":{"identifier":"maxTokenIx"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7390130272431652744},"usedName":{"valueName":{"identifier":"unsafeFreeze"}},"qualification":"Unsafe"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.IOArray"},"usedName":{"typeName":{"identifier":"IOArray"}},"qualification":"IOA"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":2816526690544347233},"usedName":{"typeName":{"identifier":"HeaderValue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":1967376015967899813},"usedName":{"typeName":{"identifier":"TokenHeaderList"}},"qualification":null},{"reference":{"otherSlice":3770236081188429249},"usedName":{"valueName":{"identifier":"hasOneByte"}},"qualification":null},{"reference":{"otherSlice":3881237054726774681},"usedName":{"valueName":{"identifier":"getByte"}},"qualification":null},{"reference":{"otherSlice":1775446759656520807},"usedName":{"constructorName":{"identifier":"Token"},"constructorTypeName":{"identifier":"Token"}},"qualification":null},{"reference":{"otherSlice":1775446759656520807},"usedName":{"valueName":{"identifier":"isPseudo"}},"qualification":null},{"reference":{"otherSlice":1775446759656520807},"usedName":{"valueName":{"identifier":"ix"}},"qualification":null},{"reference":{"otherSlice":1775446759656520807},"usedName":{"valueName":{"identifier":"shouldBeIndexed"}},"qualification":null},{"reference":{"otherSlice":1775446759656520807},"usedName":{"valueName":{"identifier":"tokenKey"}},"qualification":null},{"reference":{"otherSlice":3643532483078383744},"usedName":{"valueName":{"identifier":"toTokenHeader"}},"qualification":null},{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"unsafeRead"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"valueName":{"identifier":"throwIO"}},"qualification":null},{"reference":{"otherSlice":1918176709733076383},"usedName":{"constructorName":{"identifier":"IllegalHeaderName"},"constructorTypeName":{"identifier":"DecodeError"}},"qualification":null},{"reference":{"otherSlice":602550092323938348},"usedName":{"valueName":{"identifier":"isMaxTokenIx"}},"qualification":null},{"reference":{"otherSlice":409732285050159535},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":3407107268097432711},"usedName":{"valueName":{"identifier":"any"}},"qualification":"B8"},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isUpper"}},"qualification":null},{"reference":{"otherSlice":3945053944125703351},"usedName":{"valueName":{"identifier":"original"}},"qualification":null},{"reference":{"otherSlice":3722514055771280507},"usedName":{"valueName":{"identifier":"isCookieTokenIx"}},"qualification":null},{"reference":{"otherSlice":211242300878604134},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":4709582743340651841},"usedName":{"valueName":{"operator":"<<"}},"qualification":null},{"reference":{"otherSlice":8545298451166551068},"usedName":{"valueName":{"identifier":"run"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"otherSlice":3921863050979165916},"usedName":{"valueName":{"identifier":"intercalate"}},"qualification":"BS"},{"reference":{"otherSlice":980852382530463376},"usedName":{"valueName":{"identifier":"tokenCookie"}},"qualification":null},{"reference":{"otherSlice":3204970167220424748},"usedName":{"valueName":{"identifier":"cookieTokenIx"}},"qualification":null},{"reference":{"otherSlice":2728446607831036551},"usedName":{"typeName":{"identifier":"DynamicTable"}},"qualification":null},{"reference":{"otherSlice":4242350305663552248},"usedName":{"typeName":{"identifier":"ReadBuffer"}},"qualification":null},{"reference":{"otherSlice":8600406821186109033},"usedName":{"typeName":{"identifier":"ValueTable"}},"qualification":null}],"fragment":["decodeSophisticated ::\n                    DynamicTable -> ReadBuffer -> IO (TokenHeaderList, ValueTable)","decodeSophisticated dyntbl rbuf\n  = do arr <- IOA.newArray (minTokenIx, maxTokenIx) Nothing\n       !tvs <- pseudoNormal arr\n       tbl <- Unsafe.unsafeFreeze arr\n       return (tvs, tbl)\n  where pseudoNormal ::\n                     IOA.IOArray Int (Maybe HeaderValue) -> IO TokenHeaderList\n        pseudoNormal arr = pseudo\n          where pseudo\n                  = do more <- hasOneByte rbuf\n                       if more then\n                         do w <- getByte rbuf\n                            tv@(!Token{..}, !v) <- toTokenHeader dyntbl w rbuf\n                            if isPseudo then\n                              do mx <- unsafeRead arr ix\n                                 when (isJust mx) $ throwIO IllegalHeaderName\n                                 when (isMaxTokenIx ix) $ throwIO IllegalHeaderName\n                                 unsafeWrite arr ix (Just v)\n                                 pseudo\n                              else\n                              do when (isMaxTokenIx ix && B8.any isUpper (original tokenKey)) $\n                                   throwIO IllegalHeaderName\n                                 unsafeWrite arr ix (Just v)\n                                 if isCookieTokenIx ix then normal empty (empty << v) else\n                                   normal (empty << tv) empty\n                         else return []\n                normal !builder !cookie\n                  = do more <- hasOneByte rbuf\n                       if more then\n                         do w <- getByte rbuf\n                            tv@(Token{..}, !v) <- toTokenHeader dyntbl w rbuf\n                            when isPseudo $ throwIO IllegalHeaderName\n                            when (isMaxTokenIx ix && B8.any isUpper (original tokenKey)) $\n                              throwIO IllegalHeaderName\n                            unsafeWrite arr ix (Just v)\n                            if isCookieTokenIx ix then normal builder (cookie << v) else\n                              normal (builder << tv) cookie\n                         else\n                         do let !tvs0 = run builder\n                                !cook = run cookie\n                            if null cook then return tvs0 else\n                              do let !v = BS.intercalate \"; \" cook\n                                     !tvs = (tokenCookie, v) : tvs0\n                                 unsafeWrite arr cookieTokenIx (Just v)\n                                 return tvs"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}