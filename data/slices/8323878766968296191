{"sliceID":8323878766968296191,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":8481347181219118462},"usedName":{"typeName":{"identifier":"MonadError"}},"qualification":null},{"reference":{"otherSlice":4426932037271932392},"usedName":{"typeName":{"identifier":"ExceptT"}},"qualification":null},{"reference":{"otherSlice":8481347181219118462},"usedName":{"valueName":{"identifier":"throwError"}},"qualification":null},{"reference":{"otherSlice":6182736765166991678},"usedName":{"valueName":{"identifier":"throwE"}},"qualification":"ExceptT"},{"reference":{"otherSlice":8481347181219118462},"usedName":{"valueName":{"identifier":"catchError"}},"qualification":null},{"reference":{"otherSlice":7104902518876031983},"usedName":{"valueName":{"identifier":"catchE"}},"qualification":"ExceptT"}],"fragment":["instance Monad m => MonadError e (ExceptT e m) where\n        throwError = ExceptT.throwE\n        catchError = ExceptT.catchE"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","FlexibleInstances","UndecidableInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}