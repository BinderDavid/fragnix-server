{"sliceID":4983299350942139991,"uses":[{"reference":{"otherSlice":6248301032506076659},"usedName":{"valueName":{"identifier":"fromDistinctDescList"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Eq"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["fromDescListWithKey ::\n                      Eq k => (k -> a -> a -> a) -> [(k, a)] -> Map k a","fromDescListWithKey f xs = fromDistinctDescList (combineEq f xs)\n  where combineEq _ xs'\n          = case xs' of\n                [] -> []\n                [x] -> [x]\n                (x : xx) -> combineEq' x xx\n        combineEq' z [] = [z]\n        combineEq' z@(kz, zz) (x@(kx, xx) : xs')\n          | kx == kz = let yy = f kx xx zz in combineEq' (kx, yy) xs'\n          | otherwise = z : combineEq' x xs'"],"instances":[],"language":{"extensions":["BangPatterns","PatternGuards","DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}