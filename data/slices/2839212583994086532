{"sliceID":2839212583994086532,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Enum"},"usedName":{"valueName":{"identifier":"enumFromTo"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7849470518260417306},"usedName":{"valueName":{"identifier":"head"}},"qualification":"S"},{"reference":{"otherSlice":3614395790875576105},"usedName":{"valueName":{"identifier":"elemIndices"}},"qualification":"S"},{"reference":{"otherSlice":4808810126584848015},"usedName":{"valueName":{"identifier":"automaton"}},"qualification":null},{"reference":{"otherSlice":8068578393031383548},"usedName":{"valueName":{"identifier":"unsafeIndex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":7390130272431652744},"usedName":{"valueName":{"identifier":"unsafeAt"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"identifier":"shiftL"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["strictSearcher :: Bool -> S.ByteString -> S.ByteString -> [Int]","strictSearcher _ !pat\n  | S.null pat = enumFromTo 0 . S.length\n  | S.length pat == 1 = let !w = S.head pat in S.elemIndices w\nstrictSearcher !overlap pat = search\n  where !patLen = S.length pat\n        !auto = automaton pat\n        !p0 = unsafeIndex pat 0\n        !ams = if overlap then patLen else 0\n        search str = match 0 0\n          where !strLen = S.length str\n                \n                {-# INLINE strAt #-}\n                \n                strAt :: Int -> Int\n                strAt !i = fromIntegral (unsafeIndex str i)\n                match 0 idx\n                  | idx == strLen = []\n                  | unsafeIndex str idx == p0 = match 1 (idx + 1)\n                  | otherwise = match 0 (idx + 1)\n                match state idx\n                  | idx == strLen = []\n                  | otherwise =\n                    let !nstate = unsafeAt auto ((state `shiftL` 8) + strAt idx)\n                        !nxtIdx = idx + 1\n                      in\n                      if nstate == patLen then (nxtIdx - patLen) : match ams nxtIdx else\n                        match nstate nxtIdx"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}