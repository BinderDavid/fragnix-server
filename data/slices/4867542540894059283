{"sliceID":4867542540894059283,"uses":[{"reference":{"otherSlice":8530159555426240241},"usedName":{"valueName":{"identifier":"break"}},"qualification":"S"},{"reference":{"otherSlice":3627595078809745886},"usedName":{"valueName":{"identifier":"isSpace"}},"qualification":null},{"reference":{"otherSlice":8367622675347968738},"usedName":{"valueName":{"identifier":"map"}},"qualification":"S"},{"reference":{"otherSlice":8671408432898955317},"usedName":{"valueName":{"identifier":"toLower"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":5030599164842377315},"usedName":{"valueName":{"identifier":"dropWhile"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7475448976246078017},"usedName":{"valueName":{"identifier":"decodeLenient"}},"qualification":null},{"reference":{"otherSlice":4959868806653949764},"usedName":{"valueName":{"identifier":"_colon"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":8592546851761716},"usedName":{"valueName":{"identifier":"uncons"}},"qualification":"S"},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["extractBasicAuth :: ByteString -> Maybe (ByteString, ByteString)","extractBasicAuth bs\n  = let (x, y) = S.break isSpace bs in\n      if S.map toLower x == \"basic\" then extract $ S.dropWhile isSpace y\n        else Nothing\n  where extract encoded\n          = let raw = decodeLenient encoded\n                (username, password') = S.break (== _colon) raw\n              in ((username,) . snd) <$> S.uncons password'"],"instances":[],"language":{"extensions":["OverloadedStrings","RecordWildCards","TupleSections","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}