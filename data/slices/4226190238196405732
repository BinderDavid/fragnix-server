{"sliceID":4226190238196405732,"uses":[{"reference":{"otherSlice":976628837217299383},"usedName":{"constructorName":{"identifier":"Stream"},"constructorTypeName":{"identifier":"Stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"SPEC"},"constructorTypeName":{"identifier":"SPEC"}},"qualification":null},{"reference":{"otherSlice":1258919833507916442},"usedName":{"constructorName":{"identifier":"Yield"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":7983455372018825889},"usedName":{"valueName":{"identifier":"foldlM"}},"qualification":null},{"reference":{"otherSlice":1258919833507916442},"usedName":{"constructorName":{"identifier":"Skip"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":1258919833507916442},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Step"}},"qualification":null},{"reference":{"otherSlice":597998669842714883},"usedName":{"valueName":{"identifier":"error"}},"qualification":"Ck"},{"reference":{"otherSlice":4099865619337112873},"usedName":{"valueName":{"identifier":"emptyStream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":976628837217299383},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["foldl1M :: Monad m => (a -> a -> m a) -> Stream m a -> m a","foldl1M f (Stream step t) = foldl1M_loop SPEC t\n  where foldl1M_loop !_ s\n          = do r <- step s\n               case r of\n                   Yield x s' -> foldlM f x (Stream step s')\n                   Skip s' -> foldl1M_loop SPEC s'\n                   Done -> (\\ state ->\n                              (Ck.error \"Data/Vector/Fusion/Stream/Monadic.hs\" 909) state\n                                emptyStream)\n                             \"foldl1M\""],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}