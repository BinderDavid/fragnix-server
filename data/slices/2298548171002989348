{"sliceID":2298548171002989348,"uses":[{"reference":{"otherSlice":4729247981504330318},"usedName":{"valueName":{"identifier":"twoDigits"}},"qualification":null},{"reference":{"otherSlice":3568513668788864857},"usedName":{"valueName":{"identifier":"peekChar"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1475569709675169914},"usedName":{"valueName":{"identifier":"anyChar"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"otherSlice":1826375473622514956},"usedName":{"valueName":{"identifier":"takeWhile1"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"isDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"otherSlice":2067392032493703849},"usedName":{"valueName":{"identifier":"toPico"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"operator":"^"}},"qualification":null},{"reference":{"otherSlice":1461833044985268133},"usedName":{"constructorName":{"identifier":"T"},"constructorTypeName":{"identifier":"T"}},"qualification":null},{"reference":{"otherSlice":602146803054542671},"usedName":{"valueName":{"identifier":"foldl'"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"ord"}},"qualification":null},{"reference":{"builtinModule":"Data.Bits"},"usedName":{"valueName":{"operator":".&."}},"qualification":null},{"reference":{"otherSlice":1770770862601050229},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"builtinModule":"Data.Fixed"},"usedName":{"typeName":{"identifier":"Pico"}},"qualification":null}],"fragment":["seconds :: Parser Pico","seconds\n  = do real <- twoDigits\n       mc <- peekChar\n       case mc of\n           Just '.' -> do t <- anyChar *> takeWhile1 isDigit\n                          return $! parsePicos real t\n           _ -> return $! fromIntegral real\n  where parsePicos a0 t = toPico (fromIntegral (t' * 10 ^ n))\n          where T n t' = T.foldl' step (T 12 (fromIntegral a0)) t\n                step ma@(T m a) c\n                  | m <= 0 = ma\n                  | otherwise = T (m - 1) (10 * a + fromIntegral (ord c) .&. 15)"],"instances":[],"language":{"extensions":["BangPatterns","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}