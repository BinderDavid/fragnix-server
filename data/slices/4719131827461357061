{"sliceID":4719131827461357061,"uses":[{"reference":{"otherSlice":5577026005116061919},"usedName":{"constructorName":{"identifier":"HashPSQ"},"constructorTypeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"otherSlice":515396024337494289},"usedName":{"valueName":{"identifier":"deleteView"}},"qualification":"IntPSQ"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3545442061195933811},"usedName":{"valueName":{"identifier":"unsafeInsertNew"}},"qualification":"IntPSQ"},{"reference":{"otherSlice":258033232516555062},"usedName":{"constructorName":{"identifier":"B"},"constructorTypeName":{"identifier":"Bucket"}},"qualification":null},{"reference":{"otherSlice":1653478133539946166},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"OrdPSQ"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":8183205439228685236},"usedName":{"valueName":{"identifier":"toBucket"}},"qualification":null},{"reference":{"otherSlice":717122325345202639},"usedName":{"valueName":{"identifier":"mkBucket"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":1872280366137266154},"usedName":{"valueName":{"identifier":"alter"}},"qualification":"OrdPSQ"},{"reference":{"otherSlice":6947997737051125680},"usedName":{"valueName":{"identifier":"hash"}},"qualification":null},{"reference":{"otherSlice":6947997737051125680},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5577026005116061919},"usedName":{"typeName":{"identifier":"HashPSQ"}},"qualification":null}],"fragment":["alter ::\n        (Hashable k, Ord k, Ord p) =>\n        (Maybe (p, v) -> (b, Maybe (p, v))) ->\n          k -> HashPSQ k p v -> (b, HashPSQ k p v)","alter f k (HashPSQ ipsq)\n  = case IntPSQ.deleteView h ipsq of\n        Nothing -> case f Nothing of\n                       (b, Nothing) -> (b, HashPSQ ipsq)\n                       (b, Just (p, x)) -> (b,\n                                            HashPSQ $\n                                              IntPSQ.unsafeInsertNew h p (B k x OrdPSQ.empty) ipsq)\n        Just (bp, B bk bx opsq, ipsq') | k == bk ->\n                                         case f (Just (bp, bx)) of\n                                             (b, Nothing) -> case toBucket opsq of\n                                                                 Nothing -> (b, HashPSQ ipsq')\n                                                                 Just (bp', bucket') -> (b,\n                                                                                         HashPSQ $\n                                                                                           IntPSQ.unsafeInsertNew\n                                                                                             h\n                                                                                             bp'\n                                                                                             bucket'\n                                                                                             ipsq')\n                                             (b, Just (p, x)) -> case mkBucket k p x opsq of\n                                                                     (bp', bucket') -> (b,\n                                                                                        HashPSQ $\n                                                                                          IntPSQ.unsafeInsertNew\n                                                                                            h\n                                                                                            bp'\n                                                                                            bucket'\n                                                                                            ipsq')\n                                       | otherwise ->\n                                         case OrdPSQ.alter f k opsq of\n                                             (b, opsq') -> case mkBucket bk bp bx opsq' of\n                                                               (bp', bucket') -> (b,\n                                                                                  HashPSQ $\n                                                                                    IntPSQ.unsafeInsertNew\n                                                                                      h\n                                                                                      bp'\n                                                                                      bucket'\n                                                                                      ipsq')\n  where h = hash k"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","GeneralizedNewtypeDeriving","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}