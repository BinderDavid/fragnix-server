{"sliceID":7940594825235339734,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":404915850270007730},"usedName":{"valueName":{"identifier":"isPrefixOf"}},"qualification":"B"},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"B"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":3957479230352181842},"usedName":{"valueName":{"identifier":"breakByte"}},"qualification":"B"},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"B"}],"fragment":["extractPath :: B.ByteString -> B.ByteString","extractPath = ensureNonEmpty . extract\n  where extract path\n          | \"http://\" `B.isPrefixOf` path =\n            (snd . breakOnSlash . B.drop 7) path\n          | \"https://\" `B.isPrefixOf` path =\n            (snd . breakOnSlash . B.drop 8) path\n          | otherwise = path\n        breakOnSlash = B.breakByte 47\n        ensureNonEmpty \"\" = \"/\"\n        ensureNonEmpty p = p"],"instances":[],"language":{"extensions":["OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}