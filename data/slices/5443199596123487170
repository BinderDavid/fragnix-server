{"sliceID":5443199596123487170,"uses":[{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":1494125207425707199},"usedName":{"valueName":{"operator":"$!?"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"otherSlice":785904247419730215},"usedName":{"valueName":{"identifier":"adjustDigit"}},"qualification":null},{"reference":{"otherSlice":3377902839906226775},"usedName":{"valueName":{"identifier":"adjustNode"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4255773995153485309},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":4211287241280370958},"usedName":{"typeName":{"identifier":"MaybeForce"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null}],"fragment":["adjustTree ::\n             (Sized a, MaybeForce a) =>\n             (Int -> a -> a) -> Int -> FingerTree a -> FingerTree a","adjustTree _ !_ EmptyT = EmptyT\nadjustTree f i (Single x) = Single $!? f i x\nadjustTree f i (Deep s pr m sf)\n  | i < spr = Deep s (adjustDigit f i pr) m sf\n  | i < spm =\n    let !m' = adjustTree (adjustNode f) (i - spr) m in Deep s pr m' sf\n  | otherwise = Deep s pr m (adjustDigit f (i - spm) sf)\n  where spr = size pr\n        spm = spr + size m"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}