{"sliceID":8187431346519380619,"uses":[{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"repeat"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"otherSlice":2839212583994086532},"usedName":{"valueName":{"identifier":"strictSearcher"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":1264447719843148261},"usedName":{"valueName":{"identifier":"take"}},"qualification":"S"},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["splitKeepFront :: S.ByteString -> S.ByteString -> [S.ByteString]","splitKeepFront pat | S.null pat = const (repeat S.empty)\nsplitKeepFront pat = splitter\n  where !patLen = S.length pat\n        searcher = strictSearcher False pat\n        splitter str\n          | S.null str = []\n          | otherwise =\n            case searcher str of\n                [] -> [str]\n                (i : rst) | i == 0 ->\n                            case rst of\n                                [] -> [str]\n                                (j : _) -> S.take j str : splitter' (S.drop j str)\n                          | otherwise -> S.take i str : splitter' (S.drop i str)\n        splitter' str\n          | S.null str = []\n          | otherwise =\n            case searcher (S.drop patLen str) of\n                [] -> [str]\n                (i : _) -> S.take (i + patLen) str :\n                             splitter' (S.drop (i + patLen) str)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}