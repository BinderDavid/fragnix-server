{"sliceID":3897279307397178903,"uses":[{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftA3"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1083702335265231877},"usedName":{"valueName":{"identifier":"ptrEq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":140230030014943349},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":826780008414697163},"usedName":{"valueName":{"identifier":"link2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["filterWithKeyA ::\n                 Applicative f => (k -> a -> f Bool) -> Map k a -> f (Map k a)","filterWithKeyA _ Tip = pure Tip\nfilterWithKeyA p t@(Bin _ kx x l r)\n  = liftA3 combine (p kx x) (filterWithKeyA p l) (filterWithKeyA p r)\n  where combine True pl pr\n          | pl `ptrEq` l && pr `ptrEq` r = t\n          | otherwise = link kx x pl pr\n        combine False pl pr = link2 pl pr"],"instances":[],"language":{"extensions":["BangPatterns","PatternGuards","DeriveDataTypeable","StandaloneDeriving","RoleAnnotations","TypeFamilies","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}