{"sliceID":2518598362982792834,"uses":[{"reference":{"otherSlice":5577026005116061919},"usedName":{"constructorName":{"identifier":"HashPSQ"},"constructorTypeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"otherSlice":8626092463509893895},"usedName":{"valueName":{"identifier":"unsafeLookupIncreasePriority"}},"qualification":"IntPSQ"},{"reference":{"otherSlice":258033232516555062},"usedName":{"constructorName":{"identifier":"B"},"constructorTypeName":{"identifier":"Bucket"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":717122325345202639},"usedName":{"valueName":{"identifier":"mkBucket"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":5587662454724127937},"usedName":{"valueName":{"identifier":"lookup"}},"qualification":"OrdPSQ"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3386666970624393121},"usedName":{"valueName":{"identifier":"insert"}},"qualification":"OrdPSQ"},{"reference":{"otherSlice":6947997737051125680},"usedName":{"valueName":{"identifier":"hash"}},"qualification":null},{"reference":{"otherSlice":6947997737051125680},"usedName":{"typeName":{"identifier":"Hashable"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"typeName":{"identifier":"Ord"}},"qualification":null},{"reference":{"otherSlice":5577026005116061919},"usedName":{"typeName":{"identifier":"HashPSQ"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null}],"fragment":["unsafeLookupIncreasePriority ::\n                               (Hashable k, Ord k, Ord p) =>\n                               k -> p -> HashPSQ k p v -> (Maybe (p, v), HashPSQ k p v)","unsafeLookupIncreasePriority k p (HashPSQ ipsq)\n  = (mbPV, HashPSQ ipsq')\n  where (!mbPV, !ipsq')\n          = IntPSQ.unsafeLookupIncreasePriority\n              (\\ bp b@(B bk bx opsq) ->\n                 if k == bk then\n                   let (bp', b') = mkBucket k p bx opsq in (Just (bp, bx), bp', b')\n                   else\n                   case OrdPSQ.lookup k opsq of\n                       Nothing -> (Nothing, bp, b)\n                       Just (p', x) -> let b' = B bk bx (OrdPSQ.insert k p x opsq) in\n                                         (Just (p', x), bp, b'))\n              (hash k)\n              ipsq"],"instances":[],"language":{"extensions":["BangPatterns","DeriveFoldable","DeriveFunctor","DeriveTraversable","GeneralizedNewtypeDeriving","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}