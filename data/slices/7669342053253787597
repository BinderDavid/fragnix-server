{"sliceID":7669342053253787597,"uses":[{"reference":{"otherSlice":460497716562189627},"usedName":{"valueName":{"identifier":"mask"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2217614846813828485},"usedName":{"valueName":{"identifier":"onException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":460497716562189627},"usedName":{"typeName":{"identifier":"MonadMask"}},"qualification":null}],"fragment":["bracket :: MonadMask m => m a -> (a -> m b) -> (a -> m c) -> m c","bracket acquire release use\n  = mask $\n      \\ unmasked ->\n        do resource <- acquire\n           result <- unmasked (use resource) `onException` release resource\n           _ <- release resource\n           return result"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}