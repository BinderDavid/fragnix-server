{"sliceID":7104902518876031983,"uses":[{"reference":{"otherSlice":4426932037271932392},"usedName":{"constructorName":{"identifier":"ExceptT"},"constructorTypeName":{"identifier":"ExceptT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":4214969997485425698},"usedName":{"valueName":{"identifier":"runExceptT"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":4426932037271932392},"usedName":{"typeName":{"identifier":"ExceptT"}},"qualification":null}],"fragment":["catchE ::\n         (Monad m) =>\n         ExceptT e m a -> (e -> ExceptT e' m a) -> ExceptT e' m a","m `catchE` h\n  = ExceptT $\n      do a <- runExceptT m\n         case a of\n             Left l -> runExceptT (h l)\n             Right r -> return (Right r)"],"instances":[],"language":{"extensions":["AutoDeriveTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}