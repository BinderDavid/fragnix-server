{"sliceID":7713370061874747573,"uses":[{"reference":{"otherSlice":3321873544491540098},"usedName":{"constructorName":{"identifier":"Function"},"constructorTypeName":{"identifier":"RoutePattern"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":8901720400539514837},"usedName":{"valueName":{"identifier":"pack"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"GHC.Show"},"usedName":{"valueName":{"identifier":"show"}},"qualification":null},{"reference":{"builtinModule":"Control.Arrow"},"usedName":{"valueName":{"operator":"***"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"zip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":1025338967880452970},"usedName":{"valueName":{"identifier":"matchRegexAll"}},"qualification":"Regex"},{"reference":{"otherSlice":5998703756803487299},"usedName":{"valueName":{"identifier":"unpack"}},"qualification":"T"},{"reference":{"otherSlice":176597953123978876},"usedName":{"valueName":{"identifier":"path"}},"qualification":null},{"reference":{"otherSlice":2914606323092772758},"usedName":{"valueName":{"identifier":"mkRegex"}},"qualification":"Regex"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"otherSlice":3321873544491540098},"usedName":{"typeName":{"identifier":"RoutePattern"}},"qualification":null}],"fragment":["regex :: String -> RoutePattern","regex pattern\n  = Function $\n      \\ req ->\n        fmap (map (T.pack . show *** T.pack) . zip [0 :: Int ..] . strip)\n          (Regex.matchRegexAll rgx $ T.unpack $ path req)\n  where rgx = Regex.mkRegex pattern\n        strip (_, match, _, subs) = match : subs"],"instances":[],"language":{"extensions":["FlexibleContexts","FlexibleInstances","OverloadedStrings","RankNTypes","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}