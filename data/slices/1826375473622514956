{"sliceID":1826375473622514956,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":7242914408396716483},"usedName":{"valueName":{"identifier":"demandInput"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"=<<"}},"qualification":null},{"reference":{"otherSlice":7202326082261988518},"usedName":{"valueName":{"identifier":"endOfChunk"}},"qualification":null},{"reference":{"otherSlice":5173392314663077224},"usedName":{"valueName":{"identifier":"takeWhile"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":3807820378241765671},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":3064526119449280021},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"otherSlice":4114422234388705936},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":1938893007876517023},"usedName":{"valueName":{"identifier":"takeWhileAcc"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1770770862601050229},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeWhile1 :: (Char -> Bool) -> Parser Text","takeWhile1 p\n  = do (`when` demandInput) =<< endOfChunk\n       h <- T.takeWhile p <$> get\n       let size' = size h\n       when (size' == 0) $ fail \"takeWhile1\"\n       advance size'\n       eoc <- endOfChunk\n       if eoc then takeWhileAcc p [h] else return h"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}