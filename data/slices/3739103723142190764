{"sliceID":3739103723142190764,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monoid"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Functor"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"otherSlice":435732019952753290},"usedName":{"typeName":{"identifier":"AccumT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":435732019952753290},"usedName":{"constructorName":{"identifier":"AccumT"},"constructorTypeName":{"identifier":"AccumT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"const"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mempty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*>"}},"qualification":null},{"reference":{"otherSlice":300208031876827798},"usedName":{"valueName":{"identifier":"runAccumT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null}],"fragment":["instance (Monoid w, Functor m, Monad m) => Applicative (AccumT w m)\n         where\n        pure a = AccumT $ const $ return (a, mempty)\n        \n        {-# INLINE pure #-}\n        mf <*> mv\n          = AccumT $\n              \\ w ->\n                do ~(f, w') <- runAccumT mf w\n                   ~(v, w'') <- runAccumT mv (w `mappend` w')\n                   return (f v, w' `mappend` w'')\n        \n        {-# INLINE (<*>) #-}"],"instances":[],"language":{"extensions":["AutoDeriveTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}