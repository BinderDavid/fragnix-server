{"sliceID":6708737766141309667,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":8609837841181870823},"usedName":{"constructorName":{"identifier":"Node"},"constructorTypeName":{"identifier":"Tree"}},"qualification":null},{"reference":{"otherSlice":804984037642360357},"usedName":{"valueName":{"identifier":"contains"}},"qualification":null},{"reference":{"otherSlice":5122238119107198281},"usedName":{"valueName":{"identifier":"include"}},"qualification":null},{"reference":{"otherSlice":8609837841181870823},"usedName":{"typeName":{"identifier":"Forest"}},"qualification":null},{"reference":{"otherSlice":7946012125045908584},"usedName":{"typeName":{"identifier":"Vertex"}},"qualification":null},{"reference":{"otherSlice":3974512436854815687},"usedName":{"typeName":{"identifier":"SetM"}},"qualification":null}],"fragment":["chop :: Forest Vertex -> SetM s (Forest Vertex)","chop [] = return []\nchop (Node v ts : us)\n  = do visited <- contains v\n       if visited then chop us else\n         do include v\n            as <- chop ts\n            bs <- chop us\n            return (Node v as : bs)"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","DeriveGeneric","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}