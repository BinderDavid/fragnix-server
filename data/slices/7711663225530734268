{"sliceID":7711663225530734268,"uses":[{"reference":{"otherSlice":2898486124269704598},"usedName":{"valueName":{"identifier":"isPosix"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"isJust"}},"qualification":null},{"reference":{"otherSlice":4750573461811233073},"usedName":{"valueName":{"identifier":"readDriveShare"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"all"}},"qualification":null},{"reference":{"otherSlice":3469772711641887809},"usedName":{"valueName":{"identifier":"isPathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"take"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null},{"reference":{"otherSlice":78838168422748808},"usedName":{"valueName":{"identifier":"readDriveUNC"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"identifier":"not"}},"qualification":null},{"reference":{"otherSlice":5486495485886859461},"usedName":{"valueName":{"identifier":"hasTrailingPathSeparator"}},"qualification":null},{"reference":{"otherSlice":7749264433993515722},"usedName":{"valueName":{"identifier":"pathSeparator"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":6458057337679258196},"usedName":{"valueName":{"identifier":"joinDrive"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":8793717221598666285},"usedName":{"valueName":{"identifier":"splitDrive"}},"qualification":null},{"reference":{"otherSlice":7570393108409490918},"usedName":{"valueName":{"identifier":"isBadCharacter"}},"qualification":null},{"reference":{"otherSlice":5615172014961316444},"usedName":{"valueName":{"identifier":"joinPath"}},"qualification":null},{"reference":{"otherSlice":6772983338781332275},"usedName":{"valueName":{"identifier":"splitPath"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"break"}},"qualification":null},{"reference":{"builtinModule":"GHC.Unicode"},"usedName":{"valueName":{"identifier":"toUpper"}},"qualification":null},{"reference":{"otherSlice":5321440539430866331},"usedName":{"valueName":{"identifier":"dropWhileEnd"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"elem"}},"qualification":null},{"reference":{"otherSlice":7465593079766802137},"usedName":{"valueName":{"identifier":"badElements"}},"qualification":null},{"reference":{"otherSlice":6231974240494115122},"usedName":{"valueName":{"operator":"<.>"}},"qualification":null},{"reference":{"otherSlice":1006688544674411863},"usedName":{"valueName":{"identifier":"splitExtensions"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO"},"usedName":{"typeName":{"identifier":"FilePath"}},"qualification":null}],"fragment":["makeValid :: FilePath -> FilePath","makeValid \"\" = \"_\"\nmakeValid path\n  | isPosix = map (\\ x -> if x == '\\NUL' then '_' else x) path\n  | isJust (readDriveShare drv) && all isPathSeparator drv =\n    take 2 drv ++ \"drive\"\n  | isJust (readDriveUNC drv) && not (hasTrailingPathSeparator drv) =\n    makeValid (drv ++ [pathSeparator] ++ pth)\n  | otherwise = joinDrive drv $ validElements $ validChars pth\n  where (drv, pth) = splitDrive path\n        validChars = map f\n        f x = if isBadCharacter x then '_' else x\n        validElements x = joinPath $ map g $ splitPath x\n        g x = h a ++ b\n          where (a, b) = break isPathSeparator x\n        h x\n          = if map toUpper (dropWhileEnd (== ' ') a) `elem` badElements then\n              a ++ \"_\" <.> b else x\n          where (a, b) = splitExtensions x"],"instances":[],"language":{"extensions":["PatternGuards","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}