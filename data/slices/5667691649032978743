{"sliceID":5667691649032978743,"uses":[{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Unsafe"},"usedName":{"valueName":{"identifier":"unsafeDupablePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"otherSlice":5831756764704217508},"usedName":{"valueName":{"identifier":"mallocByteString"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"peekByteOff"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"pokeByteOff"}},"qualification":null}],"fragment":["mapAccumR ::\n          (acc -> Word8 -> (acc, Word8)) ->\n            acc -> ByteString -> (acc, ByteString)","mapAccumR f acc (PS fp o len)\n  = unsafeDupablePerformIO $\n      withForeignPtr fp $\n        \\ a ->\n          do gp <- mallocByteString len\n             acc' <- withForeignPtr gp $\n                       \\ p -> mapAccumR_ acc (len - 1) (a `plusPtr` o) p\n             return $! (acc', PS gp 0 len)\n  where mapAccumR_ !s !n !p !q\n          | n < 0 = return s\n          | otherwise =\n            do x <- peekByteOff p n\n               let (s', y) = f s x\n               pokeByteOff q n y\n               mapAccumR_ s' (n - 1) p q"],"instances":[],"language":{"extensions":["MagicHash","UnboxedTuples","NamedFieldPuns","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}