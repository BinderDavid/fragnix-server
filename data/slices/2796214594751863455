{"sliceID":2796214594751863455,"uses":[{"reference":{"otherSlice":8530606344857069545},"usedName":{"constructorName":{"identifier":"WhenMissing"},"constructorTypeName":{"identifier":"WhenMissing"}},"qualification":null},{"reference":{"otherSlice":8530606344857069545},"usedName":{"valueName":{"identifier":"missingSubtree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":8530606344857069545},"usedName":{"valueName":{"identifier":"missingKey"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Functor"}},"qualification":null},{"reference":{"otherSlice":8530606344857069545},"usedName":{"typeName":{"identifier":"WhenMissing"}},"qualification":null}],"fragment":["mapGentlyWhenMissing ::\n                       Functor f => (a -> b) -> WhenMissing f x a -> WhenMissing f x b","mapGentlyWhenMissing f t\n  = WhenMissing{missingSubtree =\n                  \\ m -> fmap f <$> missingSubtree t m,\n                missingKey = \\ k x -> fmap f <$> missingKey t k x}"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","DeriveDataTypeable","StandaloneDeriving","ScopedTypeVariables","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}