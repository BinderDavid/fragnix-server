{"sliceID":2606379462012158918,"uses":[{"reference":{"otherSlice":9177932474043345134},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":4871054613251541877},"usedName":{"typeName":{"identifier":"HashMap"}},"qualification":"H"},{"reference":{"otherSlice":6153672796402287495},"usedName":{"valueName":{"identifier":"skipSpace"}},"qualification":null},{"reference":{"otherSlice":6839481173187836993},"usedName":{"valueName":{"identifier":"peekWord8'"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7996999233900208959},"usedName":{"valueName":{"identifier":"anyWord8"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":488845226488802922},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*"}},"qualification":null},{"reference":{"otherSlice":6905897513616969629},"usedName":{"valueName":{"identifier":"char"}},"qualification":null},{"reference":{"otherSlice":3683678812901133496},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"otherSlice":3030278358846700673},"usedName":{"valueName":{"identifier":"fromList"}},"qualification":"H"}],"fragment":["objectValues ::\n             Parser Text -> Parser Value -> Parser (H.HashMap Text Value)","objectValues str val\n  = do skipSpace\n       w <- A.peekWord8'\n       if w == 125 then A.anyWord8 >> return H.empty else loop []\n  where loop acc\n          = do k <- str <* skipSpace <* char ':'\n               v <- val <* skipSpace\n               ch <- A.satisfy $ \\ w -> w == 44 || w == 125\n               let acc' = (k, v) : acc\n               if ch == 44 then skipSpace >> loop acc' else\n                 return (H.fromList acc')"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}