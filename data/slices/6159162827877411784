{"sliceID":6159162827877411784,"uses":[{"reference":{"otherSlice":6153672796402287495},"usedName":{"valueName":{"identifier":"skipSpace"}},"qualification":null},{"reference":{"otherSlice":6839481173187836993},"usedName":{"valueName":{"identifier":"peekWord8'"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7996999233900208959},"usedName":{"valueName":{"identifier":"anyWord8"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":3778636075182366270},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"Vector"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<*"}},"qualification":null},{"reference":{"otherSlice":3683678812901133496},"usedName":{"valueName":{"identifier":"satisfy"}},"qualification":"A"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"||"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":8005588339805803785},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":"Vector"},{"reference":{"otherSlice":7259977214404552025},"usedName":{"valueName":{"identifier":"fromListN"}},"qualification":"Vector"},{"reference":{"otherSlice":9177932474043345134},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"typeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":2738749419576514045},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null}],"fragment":["arrayValues :: Parser Value -> Parser (Vector Value)","arrayValues val\n  = do skipSpace\n       w <- A.peekWord8'\n       if w == 93 then A.anyWord8 >> return Vector.empty else loop [] 1\n  where loop acc !len\n          = do v <- val <* skipSpace\n               ch <- A.satisfy $ \\ w -> w == 44 || w == 93\n               if ch == 44 then skipSpace >> loop (v : acc) (len + 1) else\n                 return (Vector.reverse (Vector.fromListN len (v : acc)))"],"instances":[],"language":{"extensions":["BangPatterns","OverloadedStrings","MagicHash","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}