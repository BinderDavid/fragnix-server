{"sliceID":7896639594909034889,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Functor"}},"qualification":null},{"reference":{"otherSlice":4426932037271932392},"usedName":{"typeName":{"identifier":"ExceptT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":4426932037271932392},"usedName":{"constructorName":{"identifier":"ExceptT"},"constructorTypeName":{"identifier":"ExceptT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":4214969997485425698},"usedName":{"valueName":{"identifier":"runExceptT"}},"qualification":null}],"fragment":["instance (Functor m) => Functor (ExceptT e m) where\n        fmap f = ExceptT . fmap (fmap f) . runExceptT\n        \n        {-# INLINE fmap #-}"],"instances":[],"language":{"extensions":["AutoDeriveTypeable","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}