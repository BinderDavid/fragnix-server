{"sliceID":6998905573967528877,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":7987649984260342197},"usedName":{"valueName":{"identifier":"toChunks"}},"qualification":"L"},{"reference":{"otherSlice":7238205090002904961},"usedName":{"valueName":{"identifier":"lazyBreak"}},"qualification":null},{"reference":{"otherSlice":2178076902115356483},"usedName":{"valueName":{"identifier":"fromChunks"}},"qualification":"L"},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"},{"reference":{"otherSlice":4192188388592563342},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"L"}],"fragment":["breakSubstringL ::\n                S.ByteString -> L.ByteString -> (L.ByteString, L.ByteString)","breakSubstringL pat = breaker . L.toChunks\n  where lbrk = lazyBreak pat\n        breaker strs\n          = let (f, b) = lbrk strs in (L.fromChunks f, L.fromChunks b)"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}