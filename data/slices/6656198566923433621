{"sliceID":6656198566923433621,"uses":[{"reference":{"otherSlice":2520963219192896432},"usedName":{"typeName":{"identifier":"FromJSON1"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor.Sum"},"usedName":{"typeName":{"identifier":"Sum"}},"qualification":null},{"reference":{"otherSlice":2520963219192896432},"usedName":{"valueName":{"identifier":"liftParseJSON"}},"qualification":null},{"reference":{"otherSlice":2337681378693068080},"usedName":{"constructorName":{"identifier":"Object"},"constructorTypeName":{"identifier":"Value"}},"qualification":null},{"reference":{"otherSlice":3928167056117968559},"usedName":{"valueName":{"identifier":"toList"}},"qualification":"H"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"builtinModule":"Data.Functor.Sum"},"usedName":{"constructorName":{"identifier":"InL"},"constructorTypeName":{"identifier":"Sum"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"otherSlice":6716583115684516053},"usedName":{"valueName":{"operator":"<?>"}},"qualification":null},{"reference":{"otherSlice":2185855381435780722},"usedName":{"constructorName":{"identifier":"Key"},"constructorTypeName":{"identifier":"JSONPathElement"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor.Sum"},"usedName":{"constructorName":{"identifier":"InR"},"constructorTypeName":{"identifier":"Sum"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fail"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"++"}},"qualification":null}],"fragment":["instance (FromJSON1 f, FromJSON1 g) => FromJSON1 (Sum f g) where\n        liftParseJSON p pl (Object (H.toList -> [(key, value)]))\n          | key == inl = InL <$> liftParseJSON p pl value <?> Key inl\n          | key == inr = InR <$> liftParseJSON p pl value <?> Key inl\n          where inl, inr :: Text\n                inl = \"InL\"\n                inr = \"InR\"\n        liftParseJSON _ _ _\n          = fail $\n              \"expected an object with a single property \" ++\n                \"where the property key should be either \" ++ \"\\\"InL\\\" or \\\"InR\\\"\"\n        \n        {-# INLINE liftParseJSON #-}"],"instances":[],"language":{"extensions":["DataKinds","DefaultSignatures","FlexibleContexts","FlexibleInstances","GADTs","MultiParamTypeClasses","NamedFieldPuns","OverloadedStrings","RecordWildCards","ScopedTypeVariables","TypeOperators","TypeSynonymInstances","UndecidableInstances","ViewPatterns","PolyKinds","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}