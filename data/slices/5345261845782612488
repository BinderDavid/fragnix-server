{"sliceID":5345261845782612488,"uses":[{"reference":{"otherSlice":4225413618304992275},"usedName":{"valueName":{"identifier":"builder"}},"qualification":null},{"reference":{"otherSlice":3983792858429957001},"usedName":{"valueName":{"identifier":"runBuilder"}},"qualification":null},{"reference":{"otherSlice":6120186047343851254},"usedName":{"constructorName":{"identifier":"BufferRange"},"constructorTypeName":{"identifier":"BufferRange"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":6100562117735024754},"usedName":{"valueName":{"identifier":"bufferFull"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"typeName":{"identifier":"Ptr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Word"},"usedName":{"typeName":{"identifier":"Word8"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":7635270134028731009},"usedName":{"typeName":{"identifier":"BuildSignal"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7777936882100338668},"usedName":{"valueName":{"identifier":"pokeWord32HexN"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"fromIntegral"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"minusPtr"}},"qualification":null},{"reference":{"otherSlice":7239554030468384591},"usedName":{"valueName":{"identifier":"execWrite"}},"qualification":null},{"reference":{"otherSlice":3703495977341509960},"usedName":{"valueName":{"identifier":"writeCRLF"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":2003088715473499159},"usedName":{"valueName":{"identifier":"insertChunk"}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":"S"},{"reference":{"otherSlice":1401849627092162923},"usedName":{"valueName":{"identifier":"runPoke"}},"qualification":null},{"reference":{"otherSlice":780060703631690196},"usedName":{"valueName":{"identifier":"getPoke"}},"qualification":null},{"reference":{"otherSlice":5122846899224677429},"usedName":{"valueName":{"identifier":"writeWord32Hex"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"mappend"}},"qualification":null},{"reference":{"otherSlice":471282343692492715},"usedName":{"valueName":{"identifier":"runBuilderWith"}},"qualification":null},{"reference":{"otherSlice":2114859501507044843},"usedName":{"valueName":{"identifier":"fromWrite"}},"qualification":null},{"reference":{"otherSlice":715810349346019356},"usedName":{"valueName":{"identifier":"fillWithBuildStep"}},"qualification":null},{"reference":{"builtinModule":"Foreign.Storable"},"usedName":{"valueName":{"identifier":"sizeOf"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"undefined"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7445838117634823569},"usedName":{"valueName":{"identifier":"word32HexLength"}},"qualification":null},{"reference":{"otherSlice":8984783929342293342},"usedName":{"typeName":{"identifier":"Builder"}},"qualification":null}],"fragment":["chunkedTransferEncoding :: Builder -> Builder","chunkedTransferEncoding innerBuilder = builder transferEncodingStep\n  where transferEncodingStep k = go (runBuilder innerBuilder)\n          where go innerStep !(BufferRange op ope)\n                  | outRemaining < minimalBufferSize =\n                    return $ bufferFull minimalBufferSize op (go innerStep)\n                  | otherwise =\n                    do let !brInner@(BufferRange opInner _)\n                             = BufferRange (op `plusPtr` (chunkSizeLength + 2))\n                                 (ope `plusPtr` (-maxAfterBufferOverhead))\n                           {-# INLINE wrapChunk #-}\n                           wrapChunk ::\n                                     Ptr Word8 ->\n                                       (Ptr Word8 -> IO (BuildSignal a)) -> IO (BuildSignal a)\n                           wrapChunk !opInner' mkSignal\n                             | opInner' == opInner = mkSignal op\n                             | otherwise =\n                               do pokeWord32HexN chunkSizeLength\n                                    (fromIntegral $ opInner' `minusPtr` opInner)\n                                    op\n                                  execWrite writeCRLF (opInner `plusPtr` (-2))\n                                  execWrite writeCRLF opInner'\n                                  mkSignal (opInner' `plusPtr` 2)\n                           doneH opInner' _\n                             = wrapChunk opInner' $\n                                 \\ op' ->\n                                   do let !br' = BufferRange op' ope\n                                      k br'\n                           fullH opInner' minRequiredSize nextInnerStep\n                             = wrapChunk opInner' $\n                                 \\ op' ->\n                                   return $!\n                                     bufferFull (minRequiredSize + maxEncodingOverhead) op'\n                                       (go nextInnerStep)\n                           insertChunkH opInner' bs nextInnerStep\n                             | S.null bs =\n                               wrapChunk opInner' $\n                                 \\ op' -> return $! insertChunk op' S.empty (go nextInnerStep)\n                             | otherwise =\n                               wrapChunk opInner' $\n                                 \\ op' ->\n                                   do !op'' <- (`runPoke` op') $\n                                                 getPoke $\n                                                   writeWord32Hex (fromIntegral $ S.length bs)\n                                                     `mappend` writeCRLF\n                                      return $!\n                                        insertChunk op'' bs\n                                          (runBuilderWith (fromWrite writeCRLF) $ go nextInnerStep)\n                       fillWithBuildStep innerStep doneH fullH insertChunkH brInner\n                  where minimalChunkSize = 1\n                        maxBeforeBufferOverhead = sizeOf (undefined :: Int) + 2\n                        maxAfterBufferOverhead = 2 + sizeOf (undefined :: Int) + 2\n                        maxEncodingOverhead\n                          = maxBeforeBufferOverhead + maxAfterBufferOverhead\n                        minimalBufferSize = minimalChunkSize + maxEncodingOverhead\n                        \n                        outRemaining :: Int\n                        outRemaining = ope `minusPtr` op\n                        chunkSizeLength = word32HexLength $ fromIntegral outRemaining"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","OverloadedStrings","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}