{"sliceID":817617256219685796,"uses":[{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"constructorName":{"identifier":"PS"},"constructorTypeName":{"identifier":"ByteString"}},"qualification":null},{"reference":{"otherSlice":8547131526195760484},"usedName":{"valueName":{"identifier":"accursedUnutterablePerformIO"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Foreign.ForeignPtr"},"usedName":{"valueName":{"identifier":"withForeignPtr"}},"qualification":null},{"reference":{"otherSlice":7324754749600284797},"usedName":{"valueName":{"identifier":"firstspace"}},"qualification":null},{"reference":{"builtinModule":"GHC.Ptr"},"usedName":{"valueName":{"identifier":"plusPtr"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$!"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":4791260247128078865},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null}],"fragment":["breakSpace :: ByteString -> (ByteString, ByteString)","breakSpace (PS x s l)\n  = accursedUnutterablePerformIO $\n      withForeignPtr x $\n        \\ p ->\n          do i <- firstspace (p `plusPtr` s) 0 l\n             return $!\n               case () of\n                   _ | i == 0 -> (empty, PS x s l)\n                     | i == l -> (PS x s l, empty)\n                     | otherwise -> (PS x s i, PS x (s + i) (l - i))"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","UnboxedTuples","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}