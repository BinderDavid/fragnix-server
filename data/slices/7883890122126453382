{"sliceID":7883890122126453382,"uses":[{"reference":{"otherSlice":1686160398254035549},"usedName":{"typeName":{"identifier":"MonadCatch"}},"qualification":null},{"reference":{"otherSlice":7005556999242683042},"usedName":{"typeName":{"identifier":"MaybeT"}},"qualification":null},{"reference":{"otherSlice":1686160398254035549},"usedName":{"valueName":{"identifier":"catch"}},"qualification":null},{"reference":{"otherSlice":7005556999242683042},"usedName":{"constructorName":{"identifier":"MaybeT"},"constructorTypeName":{"identifier":"MaybeT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7005556999242683042},"usedName":{"valueName":{"identifier":"runMaybeT"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null}],"fragment":["instance MonadCatch m => MonadCatch (MaybeT m) where\n        catch (MaybeT m) f = MaybeT $ catch m (runMaybeT . f)"],"instances":[],"language":{"extensions":["ExistentialQuantification","GeneralizedNewtypeDeriving","RankNTypes","FlexibleInstances","MultiParamTypeClasses","UndecidableInstances","TypeFamilies","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}