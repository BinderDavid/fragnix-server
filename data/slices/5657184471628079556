{"sliceID":5657184471628079556,"uses":[{"reference":{"otherSlice":5405749446813497104},"usedName":{"valueName":{"identifier":"readSource"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"otherSlice":8819855837653387286},"usedName":{"valueName":{"identifier":"length"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"otherSlice":5578418172209195165},"usedName":{"valueName":{"identifier":"null"}},"qualification":"S"},{"reference":{"otherSlice":8575703113357452466},"usedName":{"valueName":{"identifier":"leftover"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"otherSlice":8530159555426240241},"usedName":{"valueName":{"identifier":"break"}},"qualification":"S"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":4345469173277560744},"usedName":{"valueName":{"identifier":"append"}},"qualification":"S"},{"reference":{"otherSlice":1986893899592906745},"usedName":{"valueName":{"identifier":"drop"}},"qualification":"S"},{"reference":{"otherSlice":6030333729083951849},"usedName":{"valueName":{"identifier":"killCR"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":9208956969054095845},"usedName":{"typeName":{"identifier":"Source"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":4942888801223460576},"usedName":{"typeName":{"identifier":"ByteString"}},"qualification":"S"}],"fragment":["takeLine :: Maybe Int -> Source -> IO (Maybe S.ByteString)","takeLine maxlen src = go \"\"\n  where go front\n          = do bs <- readSource src\n               case maxlen of\n                   Just maxlen' -> when (S.length front > maxlen') $\n                                     error \"Header line length exceeds allowed maximum.\"\n                   Nothing -> return ()\n               if S.null bs then close front else push front bs\n        close front = leftover src front >> return Nothing\n        push front bs\n          = do let (x, y) = S.break (== 10) bs in\n                 if S.null y then go $ front `S.append` x else\n                   do when (S.length y > 1) $ leftover src $ S.drop 1 y\n                      let res = front `S.append` x\n                      case maxlen of\n                          Just maxlen' -> when (S.length res > maxlen') $\n                                            error \"Header line length exceeds allowed maximum.\"\n                          Nothing -> return ()\n                      return $ Just $ killCR $ res"],"instances":[],"language":{"extensions":["OverloadedStrings","ExistentialQuantification","PatternGuards","TypeFamilies","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}