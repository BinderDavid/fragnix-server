{"sliceID":4184024583413422201,"uses":[{"reference":{"otherSlice":7914566072161072458},"usedName":{"valueName":{"identifier":"unstream"}},"qualification":null},{"reference":{"otherSlice":8370397673707655106},"usedName":{"valueName":{"identifier":"scanl"}},"qualification":"S"},{"reference":{"otherSlice":4858397224968875606},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"otherSlice":5920019322916033742},"usedName":{"valueName":{"identifier":"safe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"otherSlice":7565183779444256373},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["scanl :: (Char -> Char -> Char) -> Char -> Text -> Text","scanl f z t = unstream (S.scanl g z (stream t))\n  where g a b = safe (f a b)"],"instances":[],"language":{"extensions":["BangPatterns","MagicHash","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}