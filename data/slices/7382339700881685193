{"sliceID":7382339700881685193,"uses":[{"reference":{"otherSlice":4632010493890339229},"usedName":{"valueName":{"identifier":"chooseGoodBuffering"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Internals"},"usedName":{"valueName":{"identifier":"wantReadableHandle"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"constructorName":{"identifier":"Handle__"},"constructorTypeName":{"identifier":"Handle__"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haBufferMode"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haBuffers"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haByteBuffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haCharBuffer"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haCodec"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haDecoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haDevice"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haEncoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haInputNL"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haLastDecode"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haOtherSide"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haOutputNL"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"valueName":{"identifier":"haType"}},"qualification":null},{"reference":{"builtinModule":"GHC.IORef"},"usedName":{"valueName":{"identifier":"readIORef"}},"qualification":null},{"reference":{"otherSlice":1799642839768709490},"usedName":{"valueName":{"identifier":"readChunk"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"catch"}},"qualification":"E"},{"reference":{"otherSlice":8578265076552961716},"usedName":{"valueName":{"identifier":"catchError"}},"qualification":null},{"reference":{"otherSlice":3184162202925999579},"usedName":{"valueName":{"identifier":"null"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Internals"},"usedName":{"valueName":{"identifier":"hClose_help"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"constructorName":{"identifier":"ClosedHandle"},"constructorTypeName":{"identifier":"HandleType"}},"qualification":null},{"reference":{"otherSlice":7829621556646484510},"usedName":{"valueName":{"identifier":"concat"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.IO.Handle.Types"},"usedName":{"typeName":{"identifier":"Handle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["hGetContents :: Handle -> IO Text","hGetContents h\n  = do chooseGoodBuffering h\n       wantReadableHandle \"hGetContents\" h readAll\n  where readAll hh@Handle__{..}\n          = do let readChunks\n                     = do buf <- readIORef haCharBuffer\n                          t <- readChunk hh buf `E.catch` catchError \"hGetContents\" h hh\n                          if T.null t then return [t] else (t :) `fmap` readChunks\n               ts <- readChunks\n               (hh', _) <- hClose_help hh\n               return (hh'{haType = ClosedHandle}, T.concat ts)"],"instances":[],"language":{"extensions":["BangPatterns","RecordWildCards","ScopedTypeVariables","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}