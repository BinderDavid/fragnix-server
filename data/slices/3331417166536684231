{"sliceID":3331417166536684231,"uses":[{"reference":{"otherSlice":8980507610273769538},"usedName":{"valueName":{"identifier":"withType"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":1225366833495066670},"usedName":{"valueName":{"identifier":"buildTypeInstance"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"flip"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"otherSlice":3180007159787260149},"usedName":{"valueName":{"identifier":"jsonFunValName"}},"qualification":null},{"reference":{"otherSlice":3720735402915720453},"usedName":{"valueName":{"identifier":"arity"}},"qualification":null},{"reference":{"otherSlice":7833486762289634300},"usedName":{"typeName":{"identifier":"JSONFun"}},"qualification":null},{"reference":{"otherSlice":3720735402915720453},"usedName":{"typeName":{"identifier":"JSONClass"}},"qualification":null},{"reference":{"otherSlice":7721714347464982760},"usedName":{"typeName":{"identifier":"Options"}},"qualification":null}],"fragment":["deriveJSONClass ::\n                [(JSONFun, JSONClass -> Name -> Options -> [Con] -> Q Exp)] ->\n                  JSONClass -> Options -> Name -> Q [Dec]","deriveJSONClass consFuns jc opts name\n  = withType name $\n      \\ name' ctxt tvbs cons mbTys ->\n        (: []) <$> fromCons name' ctxt tvbs cons mbTys\n  where fromCons ::\n                 Name -> Cxt -> [TyVarBndr] -> [Con] -> Maybe [Type] -> Q Dec\n        fromCons name' ctxt tvbs cons mbTys\n          = do (instanceCxt, instanceType) <- buildTypeInstance name' jc ctxt\n                                                tvbs\n                                                mbTys\n               instanceD (return instanceCxt) (return instanceType)\n                 (methodDecs name' cons)\n        \n        methodDecs :: Name -> [Con] -> [Q Dec]\n        methodDecs name' cons\n          = flip map consFuns $\n              \\ (jf, jfMaker) ->\n                funD (jsonFunValName jf (arity jc))\n                  [clause [] (normalB $ jfMaker jc name' opts cons) []]"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","NamedFieldPuns","NoImplicitPrelude","UndecidableInstances","TemplateHaskellQuotes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards","TemplateHaskell"]}}