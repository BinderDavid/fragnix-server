{"sliceID":4678416928579920964,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"build"}},"qualification":null},{"reference":{"otherSlice":1615303225723228377},"usedName":{"valueName":{"identifier":"foldlWithIndex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":1105906692949335211},"usedName":{"typeName":{"identifier":"Seq"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null}],"fragment":["findIndicesR :: (a -> Bool) -> Seq a -> [Int]","findIndicesR p xs\n  = build\n      (\\ c n ->\n         let g z i x = if p x then c i z else z in foldlWithIndex g n xs)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}