{"sliceID":3957694993287869954,"uses":[{"reference":{"otherSlice":575220828896112508},"usedName":{"valueName":{"identifier":"wantInput"}},"qualification":null},{"reference":{"otherSlice":3807820378241765671},"usedName":{"valueName":{"identifier":"get"}},"qualification":null},{"reference":{"otherSlice":4114422234388705936},"usedName":{"valueName":{"identifier":"advance"}},"qualification":null},{"reference":{"otherSlice":3064526119449280021},"usedName":{"valueName":{"identifier":"size"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null},{"reference":{"otherSlice":1770770862601050229},"usedName":{"typeName":{"identifier":"Parser"}},"qualification":null},{"reference":{"otherSlice":6658493354337671128},"usedName":{"typeName":{"identifier":"Text"}},"qualification":null}],"fragment":["takeRest :: Parser [Text]","takeRest = go []\n  where go acc\n          = do input <- wantInput\n               if input then\n                 do s <- get\n                    advance (size s)\n                    go (s : acc)\n                 else return (reverse acc)"],"instances":[],"language":{"extensions":["BangPatterns","FlexibleInstances","GADTs","OverloadedStrings","Rank2Types","RecordWildCards","TypeFamilies","TypeSynonymInstances","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}