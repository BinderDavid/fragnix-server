{"sliceID":4652915608943686032,"uses":[{"reference":{"otherSlice":3244558403807755735},"usedName":{"constructorName":{"identifier":"Context"},"constructorTypeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":3244558403807755735},"usedName":{"valueName":{"identifier":"inputQ"}},"qualification":null},{"reference":{"otherSlice":3244558403807755735},"usedName":{"valueName":{"identifier":"controlQ"}},"qualification":null},{"reference":{"otherSlice":4085137794391250311},"usedName":{"valueName":{"identifier":"newStreamInfo"}},"qualification":null},{"reference":{"otherSlice":5226811448068103204},"usedName":{"valueName":{"identifier":"newThreadContinue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracket"}},"qualification":"E"},{"reference":{"otherSlice":251660138020207997},"usedName":{"valueName":{"identifier":"registerKillThread"}},"qualification":"T"},{"reference":{"otherSlice":5229446415489461529},"usedName":{"valueName":{"identifier":"cancel"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":2807886481907938867},"usedName":{"valueName":{"identifier":"setThreadContinue"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"True"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"try"}},"qualification":"E"},{"reference":{"otherSlice":6043783101314232459},"usedName":{"valueName":{"identifier":"pause"}},"qualification":"T"},{"reference":{"otherSlice":187204259777281489},"usedName":{"constructorName":{"identifier":"Input"},"constructorTypeName":{"identifier":"Input"}},"qualification":null},{"reference":{"builtinModule":"GHC.Conc.Sync"},"usedName":{"valueName":{"identifier":"atomically"}},"qualification":null},{"reference":{"otherSlice":8404733269277475534},"usedName":{"valueName":{"identifier":"readTQueue"}},"qualification":null},{"reference":{"otherSlice":7415862147602586694},"usedName":{"valueName":{"identifier":"setStreamInfo"}},"qualification":null},{"reference":{"otherSlice":4900873264252530777},"usedName":{"valueName":{"identifier":"resume"}},"qualification":"T"},{"reference":{"otherSlice":1163553957919013733},"usedName":{"valueName":{"identifier":"tickle"}},"qualification":"T"},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":1101192067246769824},"usedName":{"constructorName":{"identifier":"ResponseReceived"},"constructorTypeName":{"identifier":"ResponseReceived"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"constructorName":{"identifier":"SomeException"},"constructorTypeName":{"identifier":"SomeException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.IO.Exception"},"usedName":{"constructorName":{"identifier":"ThreadKilled"},"constructorTypeName":{"identifier":"AsyncException"}},"qualification":null},{"reference":{"builtinModule":"GHC.Exception"},"usedName":{"valueName":{"identifier":"fromException"}},"qualification":"E"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"constructorName":{"identifier":"False"},"constructorTypeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2704073105582061131},"usedName":{"constructorName":{"identifier":"TimeoutThread"},"constructorTypeName":{"identifier":"TimeoutThread"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"otherSlice":4227956300469329869},"usedName":{"valueName":{"identifier":"getThreadContinue"}},"qualification":null},{"reference":{"otherSlice":4719876342000502132},"usedName":{"valueName":{"identifier":"clearStreamInfo"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"when"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"&&"}},"qualification":null},{"reference":{"otherSlice":7796803688692539430},"usedName":{"valueName":{"identifier":"getStreamInfo"}},"qualification":null},{"reference":{"otherSlice":7196802242024295411},"usedName":{"valueName":{"identifier":"closed"}},"qualification":null},{"reference":{"otherSlice":2708228187031681692},"usedName":{"constructorName":{"identifier":"Killed"},"constructorTypeName":{"identifier":"ClosedCode"}},"qualification":null},{"reference":{"otherSlice":8854238798879676744},"usedName":{"valueName":{"identifier":"resetFrame"}},"qualification":null},{"reference":{"otherSlice":4373455107983741140},"usedName":{"constructorName":{"identifier":"InternalError"},"constructorTypeName":{"identifier":"ErrorCodeId"}},"qualification":null},{"reference":{"otherSlice":686719806749404538},"usedName":{"valueName":{"identifier":"streamNumber"}},"qualification":null},{"reference":{"otherSlice":7450610694038807841},"usedName":{"valueName":{"identifier":"enqueueControl"}},"qualification":null},{"reference":{"otherSlice":7606099774008308977},"usedName":{"constructorName":{"identifier":"CFrame"},"constructorTypeName":{"identifier":"Control"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"valueName":{"identifier":"settingsOnException"}},"qualification":"S"},{"reference":{"otherSlice":3244558403807755735},"usedName":{"typeName":{"identifier":"Context"}},"qualification":null},{"reference":{"otherSlice":7471038449729235448},"usedName":{"typeName":{"identifier":"Settings"}},"qualification":"S"},{"reference":{"otherSlice":628686228066488211},"usedName":{"typeName":{"identifier":"Application"}},"qualification":null},{"reference":{"otherSlice":3789092878268003829},"usedName":{"typeName":{"identifier":"Responder"}},"qualification":null},{"reference":{"otherSlice":3624653502930161964},"usedName":{"typeName":{"identifier":"Manager"}},"qualification":"T"},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null}],"fragment":["worker ::\n       Context ->\n         S.Settings -> Application -> Responder -> T.Manager -> IO ()","worker ctx@Context{inputQ, controlQ} set app responder tm\n  = do sinfo <- newStreamInfo\n       tcont <- newThreadContinue\n       let timeoutAction = return ()\n       E.bracket (T.registerKillThread tm timeoutAction) T.cancel $\n         go sinfo tcont\n  where go sinfo tcont th\n          = do setThreadContinue tcont True\n               ex <- E.try $\n                       do T.pause th\n                          inp@(Input strm req reqvt ii) <- atomically $ readTQueue inputQ\n                          setStreamInfo sinfo inp\n                          T.resume th\n                          T.tickle th\n                          app req $ responder ii reqvt tcont strm req\n               cont1 <- case ex of\n                            Right ResponseReceived -> return True\n                            Left e@(SomeException _) | Just ThreadKilled <- E.fromException e\n                                                       -> return False\n                                                     | Just T.TimeoutThread <- E.fromException e ->\n                                                       do cleanup sinfo Nothing\n                                                          return True\n                                                     | otherwise ->\n                                                       do cleanup sinfo $ Just e\n                                                          return True\n               cont2 <- getThreadContinue tcont\n               clearStreamInfo sinfo\n               when (cont1 && cont2) $ go sinfo tcont th\n        cleanup sinfo me\n          = do minp <- getStreamInfo sinfo\n               case minp of\n                   Nothing -> return ()\n                   Just (Input strm req _reqvt _ii) -> do closed ctx strm Killed\n                                                          let !frame\n                                                                = resetFrame InternalError\n                                                                    (streamNumber strm)\n                                                          enqueueControl controlQ $ CFrame frame\n                                                          case me of\n                                                              Nothing -> return ()\n                                                              Just e -> S.settingsOnException set\n                                                                          (Just req)\n                                                                          e"],"instances":[],"language":{"extensions":["NamedFieldPuns","PatternGuards","ScopedTypeVariables","OverloadedStrings","BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll"]}}