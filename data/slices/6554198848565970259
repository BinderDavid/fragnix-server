{"sliceID":6554198848565970259,"uses":[{"reference":{"otherSlice":5983356041917256038},"usedName":{"valueName":{"identifier":"zipWithM"}},"qualification":null},{"reference":{"otherSlice":3760741366798745448},"usedName":{"valueName":{"identifier":"zip3"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":976628837217299383},"usedName":{"typeName":{"identifier":"Stream"}},"qualification":null}],"fragment":["zipWith6M ::\n            Monad m =>\n            (a -> b -> c -> d -> e -> f -> m g) ->\n              Stream m a ->\n                Stream m b ->\n                  Stream m c -> Stream m d -> Stream m e -> Stream m f -> Stream m g","zipWith6M fn sa sb sc sd se sf\n  = zipWithM (\\ (a, b, c) (d, e, f) -> fn a b c d e f)\n      (zip3 sa sb sc)\n      (zip3 sd se sf)"],"instances":[],"language":{"extensions":["ExistentialQuantification","MultiParamTypeClasses","FlexibleInstances","Rank2Types","BangPatterns","KindSignatures","GADTs","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}