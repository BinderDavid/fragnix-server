{"sliceID":6302619342341729736,"uses":[{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Alternative"}},"qualification":null},{"reference":{"otherSlice":6611341608342455607},"usedName":{"typeName":{"identifier":"SmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"empty"}},"qualification":null},{"reference":{"otherSlice":8302061053130839285},"usedName":{"valueName":{"identifier":"emptySmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"<|>"}},"qualification":null},{"reference":{"otherSlice":6350502882776271008},"usedName":{"valueName":{"identifier":"createSmallArray"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"length"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":1336222803606167606},"usedName":{"valueName":{"identifier":"die"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":3416494110801854321},"usedName":{"valueName":{"identifier":"copySmallArray"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"*>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"many"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"null"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"some"}},"qualification":null}],"fragment":["instance Alternative SmallArray where\n        empty = emptySmallArray\n        sl <|> sr\n          = createSmallArray (length sl + length sr) (die \"<|>\" \"impossible\")\n              $\n              \\ sma ->\n                copySmallArray sma 0 sl 0 (length sl) *>\n                  copySmallArray sma (length sl) sr 0 (length sr)\n        many sa\n          | null sa = pure []\n          | otherwise = die \"many\" \"infinite arrays are not well defined\"\n        some sa\n          | null sa = emptySmallArray\n          | otherwise = die \"some\" \"infinite arrays are not well defined\""],"instances":[],"language":{"extensions":["MagicHash","RankNTypes","TypeFamilies","UnboxedTuples","DeriveTraversable","DeriveDataTypeable","GeneralizedNewtypeDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}