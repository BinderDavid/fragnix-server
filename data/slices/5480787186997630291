{"sliceID":5480787186997630291,"uses":[{"reference":{"otherSlice":5383107759007114376},"usedName":{"typeName":{"identifier":"Regex"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":7099028456858277446},"usedName":{"typeName":{"identifier":"WrapError"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":2531701310231575107},"usedName":{"valueName":{"identifier":"unusedRegOffset"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"genericTake"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"genericDrop"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"map"}},"qualification":null},{"reference":{"builtinModule":"Foreign.C.String"},"usedName":{"valueName":{"identifier":"withCAString"}},"qualification":null},{"reference":{"otherSlice":526195559465147999},"usedName":{"valueName":{"identifier":"wrapMatch"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null}],"fragment":["regexec ::\n        Regex ->\n          String ->\n            IO (Either WrapError (Maybe (String, String, String, [String])))","regexec regex str\n  = do let getSub (start, stop)\n             | start == unusedRegOffset = \"\"\n             | otherwise = genericTake (stop - start) . genericDrop start $ str\n           matchedParts [] = (str, \"\", \"\", [])\n           matchedParts (matchedStartStop@(start, stop) : subStartStop)\n             = (genericTake start str, getSub matchedStartStop,\n                genericDrop stop str, map getSub subStartStop)\n       maybeStartEnd <- withCAString str (wrapMatch regex)\n       case maybeStartEnd of\n           Right Nothing -> return (Right Nothing)\n           Right (Just parts) -> return . Right . Just . matchedParts $ parts\n           Left err -> return (Left err)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FunctionalDependencies","ForeignFunctionInterface","GeneralizedNewtypeDeriving","FlexibleContexts","TypeSynonymInstances","FlexibleInstances","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}