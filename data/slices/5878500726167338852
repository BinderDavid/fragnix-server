{"sliceID":5878500726167338852,"uses":[{"reference":{"otherSlice":6804932871906331787},"usedName":{"valueName":{"identifier":"runAndKeepTrack"}},"qualification":null},{"reference":{"otherSlice":983928231933241689},"usedName":{"constructorName":{"identifier":"Done"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Left"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":8292488503102734794},"usedName":{"valueName":{"identifier":"pushBack"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"constructorName":{"identifier":"Right"},"constructorTypeName":{"identifier":"Either"}},"qualification":null},{"reference":{"otherSlice":1684953695762370946},"usedName":{"constructorName":{"identifier":"C"},"constructorTypeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":983928231933241689},"usedName":{"constructorName":{"identifier":"Fail"},"constructorTypeName":{"identifier":"Decoder"}},"qualification":null},{"reference":{"builtinModule":"GHC.Err"},"usedName":{"valueName":{"identifier":"error"}},"qualification":null},{"reference":{"otherSlice":1684953695762370946},"usedName":{"typeName":{"identifier":"Get"}},"qualification":null},{"reference":{"builtinModule":"Data.Either"},"usedName":{"typeName":{"identifier":"Either"}},"qualification":null}],"fragment":["lookAheadE :: Get (Either a b) -> Get (Either a b)","lookAheadE g\n  = do (decoder, bs) <- runAndKeepTrack g\n       case decoder of\n           Done _ (Left x) -> pushBack bs >> return (Left x)\n           Done inp (Right x) -> C $ \\ _ ks -> ks inp (Right x)\n           Fail inp s -> C $ \\ _ _ -> Fail inp s\n           _ -> error \"Binary: impossible\""],"instances":[],"language":{"extensions":["RankNTypes","MagicHash","BangPatterns","TypeFamilies","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}