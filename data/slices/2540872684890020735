{"sliceID":2540872684890020735,"uses":[{"reference":{"otherSlice":4255773995153485309},"usedName":{"typeName":{"identifier":"Sized"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"typeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"EmptyT"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Single"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"otherSlice":7370334449174698517},"usedName":{"constructorName":{"identifier":"Deep"},"constructorTypeName":{"identifier":"FingerTree"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"otherSlice":4035425512200636628},"usedName":{"valueName":{"identifier":"deep"}},"qualification":null},{"reference":{"otherSlice":1140394316025442107},"usedName":{"valueName":{"identifier":"tailsDigit"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":8107163177077041873},"usedName":{"valueName":{"identifier":"digitToTree"}},"qualification":null},{"reference":{"otherSlice":5288757822827978235},"usedName":{"constructorName":{"identifier":"ConsLTree"},"constructorTypeName":{"identifier":"ViewLTree"}},"qualification":null},{"reference":{"otherSlice":1291128940555461457},"usedName":{"valueName":{"identifier":"viewLTree"}},"qualification":null},{"reference":{"otherSlice":7728429679977930358},"usedName":{"valueName":{"identifier":"tailsNode"}},"qualification":null}],"fragment":["tailsTree ::\n            Sized a => (FingerTree a -> b) -> FingerTree a -> FingerTree b","tailsTree _ EmptyT = EmptyT\ntailsTree f (Single x) = Single (f (Single x))\ntailsTree f (Deep n pr m sf)\n  = Deep n (fmap (\\ pr' -> f (deep pr' m sf)) (tailsDigit pr))\n      (tailsTree f' m)\n      (fmap (f . digitToTree) (tailsDigit sf))\n  where f' ms\n          = let ConsLTree node m' = viewLTree ms in\n              fmap (\\ pr' -> f (deep pr' m' sf)) (tailsNode node)"],"instances":[],"language":{"extensions":["BangPatterns","DeriveDataTypeable","StandaloneDeriving","FlexibleInstances","ScopedTypeVariables","DeriveGeneric","TypeFamilies","PatternSynonyms","ViewPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}