{"sliceID":2247111650189716104,"uses":[{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimMonad"}},"qualification":null},{"reference":{"otherSlice":751284367628750892},"usedName":{"typeName":{"identifier":"MVector"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Bool"}},"qualification":null},{"reference":{"otherSlice":2256778640200800668},"usedName":{"typeName":{"identifier":"Bundle"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"otherSlice":7364999129320711813},"usedName":{"typeName":{"identifier":"PrimState"}},"qualification":null},{"reference":{"otherSlice":25183579621981932},"usedName":{"valueName":{"identifier":"checkLength"}},"qualification":"Ck"},{"reference":{"otherSlice":2919479770736738958},"usedName":{"constructorName":{"identifier":"Internal"},"constructorTypeName":{"identifier":"Checks"}},"qualification":"Ck"},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"otherSlice":7468751483111131918},"usedName":{"valueName":{"identifier":"unsafeNew"}},"qualification":null},{"reference":{"otherSlice":6370104610824253647},"usedName":{"valueName":{"identifier":"unsafeWrite"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"otherwise"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"-"}},"qualification":null},{"reference":{"otherSlice":3658581144601444427},"usedName":{"valueName":{"identifier":"foldM'"}},"qualification":"Bundle"},{"reference":{"otherSlice":521552564646137297},"usedName":{"valueName":{"identifier":"check"}},"qualification":"Ck"},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"<="}},"qualification":null},{"reference":{"otherSlice":7618513344290335766},"usedName":{"valueName":{"identifier":"unsafeSlice"}},"qualification":null},{"reference":{"otherSlice":4529627819194958217},"usedName":{"valueName":{"identifier":"reverse"}},"qualification":null}],"fragment":["partitionMax ::\n               (PrimMonad m, MVector v a) =>\n               (a -> Bool) ->\n                 Bundle u a -> Int -> m (v (PrimState m) a, v (PrimState m) a)","partitionMax f s n\n  = do v <- ((Ck.checkLength \"Data/Vector/Generic/Mutable.hs\" 953)\n               Ck.Internal)\n              \"unstablePartitionMax\"\n              n\n              $ unsafeNew n\n       let {-# INLINE [0] put #-}\n           put (i, j) x\n             | f x =\n               do unsafeWrite v i x\n                  return (i + 1, j)\n             | otherwise =\n               let j' = j - 1 in\n                 do unsafeWrite v j' x\n                    return (i, j')\n       (i, j) <- Bundle.foldM' put (0, n) s\n       ((Ck.check \"Data/Vector/Generic/Mutable.hs\" 968) Ck.Internal)\n         \"partitionMax\"\n         \"invalid indices\"\n         (i <= j)\n         $ return ()\n       let l = unsafeSlice 0 i v\n           r = unsafeSlice j (n - j) v\n       reverse r\n       return (l, r)"],"instances":[],"language":{"extensions":["MultiParamTypeClasses","FlexibleContexts","BangPatterns","TypeFamilies","ScopedTypeVariables","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}