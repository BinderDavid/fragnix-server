{"sliceID":6443550292088734921,"uses":[{"reference":{"otherSlice":1891455110916781955},"usedName":{"typeName":{"identifier":"ParseTime"}},"qualification":null},{"reference":{"otherSlice":4149385944025706657},"usedName":{"typeName":{"identifier":"Day"}},"qualification":null},{"reference":{"otherSlice":1891455110916781955},"usedName":{"valueName":{"identifier":"buildTime"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Char"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"String"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"typeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"builtinModule":"GHC.Read"},"usedName":{"typeName":{"identifier":"Read"}},"qualification":null},{"reference":{"builtinModule":"Text.Read"},"usedName":{"valueName":{"identifier":"readMaybe"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"Int"}},"qualification":null},{"reference":{"builtinModule":"Data.List"},"usedName":{"valueName":{"identifier":"elemIndex"}},"qualification":null},{"reference":{"otherSlice":3810888637359003686},"usedName":{"valueName":{"identifier":"up"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"fmap"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"return"}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"+"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"Century"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"div"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"CenturyYear"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"builtinModule":"GHC.Real"},"usedName":{"valueName":{"identifier":"mod"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"fst"}},"qualification":null},{"reference":{"otherSlice":6723709052195847072},"usedName":{"valueName":{"identifier":"months"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"YearMonth"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"snd"}},"qualification":null},{"reference":{"otherSlice":1859050600199689011},"usedName":{"valueName":{"identifier":"clipValid"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"MonthDay"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"YearWeek"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"otherSlice":2130997483049706228},"usedName":{"constructorName":{"identifier":"ISOWeek"},"constructorTypeName":{"identifier":"WeekType"}},"qualification":null},{"reference":{"otherSlice":2130997483049706228},"usedName":{"constructorName":{"identifier":"SundayWeek"},"constructorTypeName":{"identifier":"WeekType"}},"qualification":null},{"reference":{"otherSlice":2130997483049706228},"usedName":{"constructorName":{"identifier":"MondayWeek"},"constructorTypeName":{"identifier":"WeekType"}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"WeekDay"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"otherSlice":6723709052195847072},"usedName":{"valueName":{"identifier":"wDays"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":"=="}},"qualification":null},{"reference":{"otherSlice":7189115489549137981},"usedName":{"constructorName":{"identifier":"YearDay"},"constructorTypeName":{"identifier":"DayComponent"}},"qualification":null},{"reference":{"builtinModule":"GHC.List"},"usedName":{"valueName":{"identifier":"last"}},"qualification":null},{"reference":{"builtinModule":"GHC.Classes"},"usedName":{"valueName":{"operator":">="}},"qualification":null},{"reference":{"builtinModule":"GHC.Num"},"usedName":{"valueName":{"operator":"*"}},"qualification":null},{"reference":{"otherSlice":2400786892402485991},"usedName":{"valueName":{"identifier":"fromGregorianValid"}},"qualification":null},{"reference":{"otherSlice":5436354165648340847},"usedName":{"valueName":{"identifier":"fromOrdinalDateValid"}},"qualification":null},{"reference":{"otherSlice":911983569038202376},"usedName":{"valueName":{"identifier":"fromWeekDateValid"}},"qualification":null},{"reference":{"otherSlice":5082503948863684649},"usedName":{"valueName":{"identifier":"fromSundayStartWeekValid"}},"qualification":null},{"reference":{"otherSlice":2989039755468229316},"usedName":{"valueName":{"identifier":"fromMondayStartWeekValid"}},"qualification":null},{"reference":{"builtinModule":"Data.Traversable"},"usedName":{"valueName":{"identifier":"mapM"}},"qualification":null},{"reference":{"builtinModule":"Data.Tuple"},"usedName":{"valueName":{"identifier":"uncurry"}},"qualification":null},{"reference":{"builtinModule":"Data.Foldable"},"usedName":{"valueName":{"identifier":"concat"}},"qualification":null}],"fragment":["instance ParseTime Day where\n        buildTime l\n          = let f :: Char -> String -> Maybe [DayComponent]\n                f c x\n                  = let ra :: (Read a) => Maybe a\n                        ra = readMaybe x\n                        \n                        zeroBasedListIndex :: [String] -> Maybe Int\n                        zeroBasedListIndex ss = elemIndex (up x) $ fmap up ss\n                        \n                        oneBasedListIndex :: [String] -> Maybe Int\n                        oneBasedListIndex ss\n                          = do index <- zeroBasedListIndex ss\n                               return $ 1 + index\n                      in\n                      case c of\n                          'C' -> do a <- ra\n                                    return [Century a]\n                          'f' -> do a <- ra\n                                    return [Century a]\n                          'Y' -> do a <- ra\n                                    return [Century (a `div` 100), CenturyYear (a `mod` 100)]\n                          'G' -> do a <- ra\n                                    return [Century (a `div` 100), CenturyYear (a `mod` 100)]\n                          'y' -> do a <- ra\n                                    return [CenturyYear a]\n                          'g' -> do a <- ra\n                                    return [CenturyYear a]\n                          'B' -> do a <- oneBasedListIndex $ fmap fst $ months l\n                                    return [YearMonth a]\n                          'b' -> do a <- oneBasedListIndex $ fmap snd $ months l\n                                    return [YearMonth a]\n                          'm' -> do raw <- ra\n                                    a <- clipValid 1 12 raw\n                                    return [YearMonth a]\n                          'd' -> do raw <- ra\n                                    a <- clipValid 1 31 raw\n                                    return [MonthDay a]\n                          'e' -> do raw <- ra\n                                    a <- clipValid 1 31 raw\n                                    return [MonthDay a]\n                          'V' -> do raw <- ra\n                                    a <- clipValid 1 53 raw\n                                    return [YearWeek ISOWeek a]\n                          'U' -> do raw <- ra\n                                    a <- clipValid 0 53 raw\n                                    return [YearWeek SundayWeek a]\n                          'W' -> do raw <- ra\n                                    a <- clipValid 0 53 raw\n                                    return [YearWeek MondayWeek a]\n                          'u' -> do raw <- ra\n                                    a <- clipValid 1 7 raw\n                                    return [WeekDay a]\n                          'a' -> do a' <- zeroBasedListIndex $ fmap snd $ wDays l\n                                    let a = if a' == 0 then 7 else a'\n                                    return [WeekDay a]\n                          'A' -> do a' <- zeroBasedListIndex $ fmap fst $ wDays l\n                                    let a = if a' == 0 then 7 else a'\n                                    return [WeekDay a]\n                          'w' -> do raw <- ra\n                                    a' <- clipValid 0 6 raw\n                                    let a = if a' == 0 then 7 else a'\n                                    return [WeekDay a]\n                          'j' -> do raw <- ra\n                                    a <- clipValid 1 366 raw\n                                    return [YearDay a]\n                          _ -> return []\n                \n                buildDay :: [DayComponent] -> Maybe Day\n                buildDay cs\n                  = let safeLast x xs = last (x : xs)\n                        y = let d = safeLast 70 [x | CenturyYear x <- cs]\n                                c = safeLast (if d >= 69 then 19 else 20) [x | Century x <- cs]\n                              in 100 * c + d\n                        rest (YearMonth m : _)\n                          = let d = safeLast 1 [x | MonthDay x <- cs] in\n                              fromGregorianValid y m d\n                        rest (YearDay d : _) = fromOrdinalDateValid y d\n                        rest (YearWeek wt w : _)\n                          = let d = safeLast 4 [x | WeekDay x <- cs] in\n                              case wt of\n                                  ISOWeek -> fromWeekDateValid y w d\n                                  SundayWeek -> fromSundayStartWeekValid y w (d `mod` 7)\n                                  MondayWeek -> fromMondayStartWeekValid y w d\n                        rest (_ : xs) = rest xs\n                        rest [] = rest [YearMonth 1]\n                      in rest cs\n              in\n              \\ pairs ->\n                do components <- mapM (uncurry f) pairs\n                   buildDay $ concat components"],"instances":[],"language":{"extensions":["Rank2Types","DeriveDataTypeable","StandaloneDeriving","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}