{"sliceID":2923629386835218153,"uses":[{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Tip"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"pure"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"constructorName":{"identifier":"Bin"},"constructorTypeName":{"identifier":"Map"}},"qualification":null},{"reference":{"builtinModule":"Data.Maybe"},"usedName":{"valueName":{"identifier":"maybe"}},"qualification":null},{"reference":{"builtinModule":"Data.Functor"},"usedName":{"valueName":{"operator":"<$>"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"identifier":"liftA3"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Nothing"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":826780008414697163},"usedName":{"valueName":{"identifier":"link2"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"constructorName":{"identifier":"Just"},"constructorTypeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":140230030014943349},"usedName":{"valueName":{"identifier":"link"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Applicative"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Maybe"}},"qualification":null},{"reference":{"otherSlice":3680591839889780986},"usedName":{"typeName":{"identifier":"Map"}},"qualification":null}],"fragment":["traverseMaybeWithKey ::\n                       Applicative f => (k -> a -> f (Maybe b)) -> Map k a -> f (Map k b)","traverseMaybeWithKey = go\n  where go _ Tip = pure Tip\n        go f (Bin _ kx x Tip Tip)\n          = maybe Tip (\\ !x' -> Bin 1 kx x' Tip Tip) <$> f kx x\n        go f (Bin _ kx x l r) = liftA3 combine (go f l) (f kx x) (go f r)\n          where combine !l' mx !r'\n                  = case mx of\n                        Nothing -> link2 l' r'\n                        Just !x' -> link kx x' l' r'"],"instances":[],"language":{"extensions":["BangPatterns","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}