{"sliceID":6110619636905419444,"uses":[{"reference":{"otherSlice":3706295977478673008},"usedName":{"typeName":{"identifier":"MonadBaseControl"}},"qualification":null},{"reference":{"builtinModule":"GHC.Types"},"usedName":{"typeName":{"identifier":"IO"}},"qualification":null},{"reference":{"otherSlice":87473710531740042},"usedName":{"valueName":{"identifier":"control"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"$"}},"qualification":null},{"reference":{"builtinModule":"Control.Exception.Base"},"usedName":{"valueName":{"identifier":"bracketOnError"}},"qualification":"E"},{"reference":{"otherSlice":3706295977478673008},"usedName":{"valueName":{"identifier":"restoreM"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":">>="}},"qualification":null}],"fragment":["bracketOnError ::\n                 MonadBaseControl IO m => m a -> (a -> m b) -> (a -> m c) -> m c","bracketOnError before after thing\n  = control $\n      \\ runInIO ->\n        E.bracketOnError (runInIO before)\n          (\\ st -> runInIO $ restoreM st >>= after)\n          (\\ st -> runInIO $ restoreM st >>= thing)"],"instances":[],"language":{"extensions":["NoImplicitPrelude","ExistentialQuantification","FlexibleContexts","RankNTypes","MultiParamTypeClasses","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}