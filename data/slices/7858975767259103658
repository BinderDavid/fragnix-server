{"sliceID":7858975767259103658,"uses":[{"reference":{"otherSlice":4199517113549565308},"usedName":{"valueName":{"identifier":"discard"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"valueName":{"operator":"."}},"qualification":null},{"reference":{"otherSlice":3658581144601444427},"usedName":{"valueName":{"identifier":"foldM'"}},"qualification":"Bundle"},{"reference":{"otherSlice":2322077952989357605},"usedName":{"valueName":{"identifier":"stream"}},"qualification":null},{"reference":{"builtinModule":"GHC.Base"},"usedName":{"typeName":{"identifier":"Monad"}},"qualification":null},{"reference":{"otherSlice":1710731503429193408},"usedName":{"typeName":{"identifier":"Vector"}},"qualification":null}],"fragment":["foldM'_ ::\n          (Monad m, Vector v b) => (a -> b -> m a) -> a -> v b -> m ()","foldM'_ m z = discard . Bundle.foldM' m z . stream"],"instances":[],"language":{"extensions":["Rank2Types","MultiParamTypeClasses","FlexibleContexts","TypeFamilies","ScopedTypeVariables","BangPatterns","NondecreasingIndentation","ExplicitForAll","PatternGuards"]}}